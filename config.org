#+TITLE: d1egoaz "dotemacs"
#+AUTHOR: Diego Alvarez
#+EMAIL: diego.canada@icloud.com
#+DESCRIPTION: d1egoaz Personal Emacs Configuration
#+CREATED: 2021-04-24

* Table of Contents                                                   :TOC_2:
- [[#getting-started][Getting Started]]
  - [[#why-emacs][Why Emacs]]
  - [[#how-i-install-emacs][How I Install Emacs]]
  - [[#lexical-binding][Lexical Binding]]
  - [[#name-and-email][Name And Email]]
  - [[#emacs-concepts][Emacs Concepts]]
- [[#package-manager][Package Manager]]
  - [[#native-compilation][Native Compilation]]
  - [[#straightel][straight.el]]
  - [[#use-packageel][use-package.el]]
  - [[#keep-emacsd-clean-no-litteringel][Keep .emacs.d clean (no-littering.el)]]
- [[#general-emacs-base-settings][General Emacs Base Settings]]
  - [[#garbage-collection][Garbage collection]]
  - [[#disable-startup-messages-and-bell][Disable startup messages and bell]]
  - [[#authinfo][Authinfo]]
  - [[#pinentry][Pinentry]]
  - [[#disable-exit-confirmation][Disable exit confirmation]]
  - [[#disable-lock-files][Disable lock files]]
  - [[#enable-files-backup][Enable files backup]]
  - [[#kill-ring-not-save-duplicates][Kill ring not save duplicates]]
  - [[#use-short-answers-yn][Use short answers y/n]]
  - [[#server-mode][Server mode]]
  - [[#increase-read-output-from-processes][Increase read output from processes]]
- [[#ui---lets-make-emacs-look-a-little-better][UI - Let's make Emacs look a little better.]]
  - [[#disable-toolbars-and-scrollbars][Disable toolbars and scrollbars]]
  - [[#increase-fill-column-width][Increase fill column width]]
  - [[#fonts][Fonts]]
  - [[#theme-modus-themesel][Theme (modus-themes.el)]]
  - [[#maximize-the-emacs-frame-on-startup][Maximize the Emacs Frame on Startup]]
- [[#buffers][Buffers]]
  - [[#scratch-buffer][Scratch buffer]]
- [[#mode-line][Mode line]]
  - [[#make-it-compact][Make it compact]]
  - [[#format][Format]]
  - [[#move-evil-mode-line-to-beginning][Move evil mode line to beginning]]
  - [[#hide-mode-line-minor-modes][Hide mode line minor modes]]
  - [[#show-current-command-in-the-mode-line-keycastel][Show current command in the mode line (keycast.el)]]
  - [[#show-column-number][Show column number]]
  - [[#show-date-and-time][Show date and time]]
  - [[#project-name][Project name]]
- [[#windows][Windows]]
  - [[#jump-to-windows-ace-windowel][Jump to windows (ace-window.el)]]
  - [[#window-rules][Window rules]]
  - [[#window-history-winnerel][Window history (winner.el)]]
- [[#workspacestabs-tab-barel][Workspaces/tabs (tab-bar.el)]]
- [[#files][Files]]
  - [[#dont-prompt-for-confirmation-when-we-create-a-new-file-or-buffer][Don't prompt for confirmation when we create a new file or buffer.]]
  - [[#create-missing-directories-when-using-find-file][Create missing directories when using find file]]
  - [[#follow-symlinks-when-opening-files][Follow symlinks when opening files.]]
  - [[#disable-the-warning-x-and-y-are-the-same-file][Disable the warning X and Y are the same file]]
  - [[#disable-file-changed-on-disk-messages][Disable file changed on disk messages]]
  - [[#restore-cursor-to-last-visited-place-in-a-file][Restore cursor to last visited place in a file]]
- [[#editor][Editor]]
  - [[#default-coding-system][Default coding system]]
  - [[#new-line-at-eof][New line at EOF]]
  - [[#display-line-numbers-and-truncated-lines][Display line numbers and truncated lines]]
  - [[#highlight-current-line][Highlight current line]]
  - [[#avoid-performance-issues-with-long-lines][Avoid performance issues with long lines]]
  - [[#underscore-_-and-hyphen---as-a-word-characters][Underscore =_= and hyphen =-= as a word characters]]
  - [[#indentation-spaces-and-tabs][Indentation, spaces, and tabs]]
  - [[#whitespace-cleanup-on-buffer-save][Whitespace cleanup on buffer save]]
  - [[#enable-narrowing-functions][Enable narrowing functions]]
- [[#lets-be-evil-evil-el][Let's Be Evil (evil-*.el)]]
  - [[#evilel][evil.el]]
  - [[#evil-collectionel][evil-collection.el]]
  - [[#goto-chgel][goto-chg.el]]
  - [[#evil-argsel][evil-args.el]]
  - [[#evil-commentaryel][evil-commentary.el]]
  - [[#evil-exchangeel][evil-exchange.el]]
  - [[#evil-escapeel][evil-escape.el]]
  - [[#evil-surroundel][evil-surround.el]]
  - [[#evil-tuning][evil Tuning]]
  - [[#better-jumpel][better-jump.el]]
- [[#completion][Completion]]
  - [[#preserve-history-with-savehist-mode][Preserve history with savehist-mode]]
  - [[#completion-framework-companyel][Completion framework (company.el)]]
  - [[#selection-and-narrowing][Selection and Narrowing]]
  - [[#key-bindings-hints-which-keyel][Key bindings hints (which-key.el)]]
- [[#search-and-replace][Search And Replace]]
  - [[#ctrlf-isearch-replacement][Ctrlf (Isearch replacement)]]
  - [[#jumping-with-avyel][Jumping with (avy.el)]]
  - [[#imenu-listel][imenu-list.el]]
  - [[#writable-grep-wgrepel][Writable grep (wgrep.el)]]
  - [[#visual-regex][Visual regex]]
- [[#project-management][Project Management]]
  - [[#git][Git]]
  - [[#projectel][project.el]]
  - [[#projectile][Projectile]]
  - [[#treemacsel][treemacs.el]]
- [[#development][Development]]
  - [[#language-server-support-lsp][Language Server Support (LSP)]]
  - [[#go][Go]]
  - [[#markdown][Markdown]]
  - [[#misc][Misc]]
  - [[#kubernetes][Kubernetes]]
  - [[#hideshowel][hideshow.el]]
  - [[#compilation-mode][Compilation mode]]
  - [[#restclientel][restclient.el]]
- [[#productivity][Productivity]]
  - [[#syntax-checking-flycheckel][Syntax checking (flycheck.el)]]
  - [[#snippets-yasnippetel][Snippets (yasnippet.el)]]
  - [[#expand-regionel][expand-region.el]]
  - [[#parens-dumbparensel][Parens (dumbparens.el)]]
  - [[#format-allel][format-all.el]]
  - [[#vtermel][vterm.el]]
  - [[#flyspellel][flyspell.el]]
  - [[#define-word][Define word]]
  - [[#buff-moveel][buff-move.el]]
  - [[#ripgrepel][ripgrep.el]]
  - [[#ieditel][iedit.el]]
  - [[#which-function-modeel][which-function-mode.el]]
- [[#org-mode][Org Mode]]
  - [[#orgel][org.el]]
  - [[#org-downloadel][org-download.el]]
  - [[#evil-orgel][evil-org.el]]
  - [[#make-org-capture-start-in-insert-mode][Make org-capture start in insert mode]]
  - [[#org-babel][Org-Babel]]
  - [[#create-table-of-dontents][Create table of dontents]]
  - [[#imenu-org-depth][iMenu org depth]]
- [[#misc-1][Misc]]
  - [[#helpfulel][helpful.el]]
  - [[#all-the-iconsel][all-the-icons.el]]
  - [[#world-clock][World Clock]]
  - [[#olivettiel][olivetti.el]]
  - [[#rss-elfeedel][RSS (elfeed.el)]]
  - [[#rainbow-modeel][rainbow-mode.el]]
  - [[#emacs-everywhereel][emacs-everywhere.el]]
  - [[#erc][erc]]
- [[#keybindings][Keybindings]]
  - [[#simplify-leader-bindings-generalel][Simplify Leader Bindings (general.el)]]
  - [[#bindings][Bindings]]
- [[#functions][Functions]]
- [[#company-specific-functions][Company Specific Functions]]
- [[#inspiration][Inspiration]]
- [[#pending-tasks-712][Pending tasks]]
  - [[#replace-ivycounselswiper-by-selectrumconsultmarginaliaembark][Replace ivy/counsel/swiper by selectrum/consult/marginalia/embark]]
  - [[#replace-persp-mode-by-tab-bar][Replace persp-mode by tab-bar]]
  - [[#replace-doom-mode-line-by-normal-mode-line][Replace doom-mode-line by normal mode-line]]
  - [[#replace-projectile-by-projectel][Replace projectile by project.el]]
  - [[#replace-selectrum-by-vertico][Replace selectrum by vertico]]
  - [[#fix-org-toc][Fix org toc]]
  - [[#make-elfeed-entry-buffer-show-below-elfeed-search][Make elfeed entry buffer show below elfeed search]]
  - [[#enable-multiple-cursors][Enable multiple cursors]]
  - [[#use-use-package-bind][Use use-package :bind]]
  - [[#move-functions-to-its-own-package-usage][move functions to it's own package usage]]
  - [[#fix-file-backup-creation][fix file backup creation]]
  - [[#fix-evil-jump-c-o-c-i][fix evil jump C-o, C-i]]

* Getting Started

** Why Emacs

- https://www.gnu.org/software/emacs/manual/emacs.html
- https://emacs.wordpress.com/2007/01/14/the-ghost-in-the-lisp-machine/

#+begin_quote
Living in Emacs is addictive. Imagine an operating system where you can switch from writing code to
browsing the web or chatting without leaving a consistent environment, with the same set of commands
and shortcuts. Imagine a set of integrated applications where data is seamlessly shared, where any
single functionality can be tweaked, extended and adapted to your particular needs. Where everything
is easily scriptable. Imagine, in additon, that the environment provides powerful and complete
interactive self-documentation facilities with which the user can find out what is available. I have
yet to find an operating system providing such an integrated environment.
-  January 14, 2007 — jao
#+end_quote

** How I Install Emacs

#+begin_example sh
brew install emacs-plus@28 --with-no-frame-refocus --with-native-comp
#+end_example

** Lexical Binding

https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html

It eliminates the problem of which variables lambda-expressions use (when they
attempt to use variables from their surrounding context), and much easier for
the compiler to optimize, because it doesn't need to worry about variables
escaping their lexical context.

#+begin_src elisp
;; -*- lexical-binding: t; -*-
#+end_src

** Name And Email

#+begin_src elisp
(setq user-full-name "Diego Alvarez")
(setq user-mail-address "diego.canada@icloud.com")
#+end_src

** Emacs Concepts

*** Functions

In Emacs, every user interaction is a function execution. There are two types of functions in Emacs:

- Normal functions ::
  These are like functions in other programming languages, and are used for implementing features in
  Emacs. Users do not need to care about these functions, unless they want to implement something or
  modify an existing implementation.
- Commands ::
  Commands are like functions, but interactive. It means, commands are features provided to users
  and users directly use them.

*** Basic motion commands in Emacs

Some of the commands don't work on evil mode, but it's a good idea to know how
to move on Emacs when evil is not available.

| Keymap | Command                             |
|--------+-------------------------------------|
| C-f    | Move forward one char               |
| C-b    | Move backward one char              |
|--------+-------------------------------------|
| C-p    | Move upward one line                |
| C-n    | Move downward one line              |
| C-a    | Move to beginning of line           |
| C-e    | Move to end of line                 |
|--------+-------------------------------------|
| M-f    | Move forward one word               |
| M-b    | Move backward one word              |
|--------+-------------------------------------|
| C-v    | Scroll forward one screen           |
| M-v    | Scroll backward one screen          |
|--------+-------------------------------------|
| M-a    | Move to the beginning of a sentence |

*** Mode line

The mode line is the empty area below the buffer. It has useful summary
information about the buffer shown in the window.

*** Minibuffer

Minibuffer is the small area at the bottom of your Emacs screen.

**** Minibuffer completion uses:

- completing-read :: to define what the completion UI looks like and how it behaves.
- completing-styles :: to define how completion filter/sorts results.

*** Echo area

Minibuffer can be used for output as well. The echo area is used for displaying
messages. Both Minibuffer and Echo Area, although serve different purposes,
share the same physical space.

*** Frames

An application window in an operating system is called a Frame in Emacs.

*** Window

Emacs can split your frame area into multiple smaller areas. Each such area is called a window.

*** Tutorial

- https://tuhdo.github.io/emacs-tutor.html

* Package Manager

** Native Compilation

#+begin_src elisp
(setq native-comp-async-report-warnings-errors nil) ; Silence compiler warnings as they can be pretty disruptive.
(setq native-comp-async-query-on-exit t)
(setq native-comp-async-jobs-number 4)
(setq native-comp-deferred-compilation t)
#+end_src

** straight.el

*=straight= is configured and installed in early-init.el.*

straight.el operates by cloning Git repositories and then symlinking files into
Emacs' load path.

=straight-use-package= package name is a *symbol* not a string.
=straight-visit-package-website= to visit package URL.

*** Update Packages

Update packages (pull in changes, then freeze), this creates
=~/.config/emacs/straight/versions/default.el=, this lockfile should be checked in.

#+begin_example elisp
(straight-pull-all)
(straight-freeze-versions)
(straight-remove-unused-repos)
#+end_example

*** Rollback/Re-Install Packages

Read version lockfile and restore package versions to those listed.

#+begin_example elisp
(straight-thaw-versions)
#+end_example

** use-package.el

*=use-package= is configured and installed in early-init.el.*

Package =use-package= provides a handy macro by the same name which is
essentially a wrapper around =with-eval-after-load= with a lot of handy
syntactic sugar and useful features.

A common use-package declaration looks like this:

#+begin_example elisp
(use-package <package-name>
   ;; The :init configuration is always executed (Not lazy)
    :init
   ;; commands to auto load
    :commands
   ;; Configure other variables and modes in the :config section,
   ;; after lazily loading the package.
    :config
    ;; configure hooks
    :hook
     ;; key bindings for this package>
    :bind)
#+end_example


#+begin_src elisp
(setq use-package-hook-name-suffix nil)
#+end_src

** Keep .emacs.d clean (no-littering.el)

#+begin_src elisp
(use-package no-littering
  :config
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  (setq auto-save-file-name-transforms `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

* General Emacs Base Settings

** Garbage collection

Enforce a sneaky Garbage Collection strategy to minimize GC interference with
user activity. During normal use a high GC threshold is set.  When idling GC is
triggered and a low threshold is set.

This is important as Emacs just dies trying to collect GC due to the huge
initial GC threshold in =early-init.el=.

#+begin_src elisp
(use-package gcmh
  :config
  (gcmh-mode 1))
#+end_src

** Disable startup messages and bell

#+begin_src elisp
(setq inhibit-startup-screen t)
(setq inhibit-startup-message t)

(setq ring-bell-function 'ignore)
(setq visible-bell nil)
#+end_src

** Authinfo

#+begin_src elisp
(setq auth-sources '("~/.authinfo.gpg"))
#+end_src

** Pinentry

Emacs can be prompted for the PIN of GPG private keys.

#+begin_src elisp
(setq epg-pinentry-mode 'loopback)
#+end_src

** Disable exit confirmation

#+begin_src elisp
(setq confirm-kill-emacs nil)
#+end_src

** Disable lock files

Disables .#file.ext creation.

#+begin_src elisp
(setq create-lockfiles nil)
#+end_src

** Enable files backup

#+begin_src elisp
(setq delete-by-moving-to-trash t)
;; to disable backups:
;; (setq make-backup-files nil)
;; (setq vc-make-backup-files nil)
;; (setq auto-save-default nil)

;; trying creating backups:
(setq auto-save-default t)
(setq backup-by-copying t)
(setq delete-old-versions -1)
(setq make-backup-files t)
(setq vc-make-backup-files t)
(setq version-control t)

;; for the ` and , see:
;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html
;; The special marker ‘,’ inside of the argument to backquote indicates a value that isn’t constant.
(setq backup-directory-alist `(("." . ,(concat no-littering-var-directory "/backup"))))
;;(setq auto-save-file-name-transforms `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

** Kill ring not save duplicates

Remove duplicates in the kill ring.

#+begin_src elisp
(setq kill-do-not-save-duplicates t)
#+end_src

** Use short answers y/n

yes-or-no-p uses shorter answers "y" or "n".

#+begin_src elisp
(setq use-short-answers t) ; new in Emacs28
#+end_src

** Server mode

Start the Emacs server from this instance so that all =emacsclient= calls are
routed here.

#+begin_src elisp
(server-start)
#+end_src

** Increase read output from processes

Increase how much is read from processes in a single chunk (default is
4kb). LSP is improved by increasing this value.

#+begin_src elisp
(setq read-process-output-max (* 1024 1024)) ; 1mb
#+end_src

* UI - Let's make Emacs look a little better.

** Disable toolbars and scrollbars

#+begin_src elisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode 1) ; I do like to have the menu-bar available to use when I break Emacs :D
#+end_src

** Increase fill column width

#+begin_src elisp
(setq-default fill-column 80)
#+end_src

** Fonts

*** Setting The Font Face

#+begin_src elisp
(set-face-attribute 'variable-pitch nil :font "Helvetica")
(set-face-attribute 'fixed-pitch nil :font "Iosevka SS08-14")
(set-face-attribute 'variable-pitch nil :font "Helvetica-14")
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
(add-to-list 'default-frame-alist '(font . "Iosevka SS08-14"))
#+end_src

*** Configure emoji font 😎

Copied from https://github.com/dunn/company-emoji

#+begin_src elisp
(defun diego--set-emoji-font (frame)
  "Adjust the font settings of FRAME so Emacs can display emoji properly."
  (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend))

;; For when Emacs is started in GUI mode:
(diego--set-emoji-font nil)

;; Hook for when a frame is created with emacsclient
;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
(add-hook 'after-make-frame-functions #'diego--set-emoji-font)
#+end_src

*** Zooming In and Out

Command/Super plus =/- for zooming in/out.

#+begin_src elisp
(global-set-key (kbd "s-=") #'text-scale-increase)
(global-set-key (kbd "s--") #'text-scale-decrease)
#+end_src

** Theme (modus-themes.el)

#+begin_src elisp
(use-package modus-themes
  :init
  (setq modus-themes-completions 'opinionated) ; {nil,'moderate,'opinionated}
  (setq modus-themes-diffs nil)
  (setq modus-themes-fringes 'subtle) ; {nil,'subtle,'intense}
  (setq modus-themes-headings '((1 . section) (2 . rainbow-line) (t . no-bold))) ; Lots of options---continue reading the manual
  (setq modus-themes-hl-line 'underline-accented)
  (setq modus-themes-links 'faint)
  (setq modus-themes-mode-line 'accented-3d)
  (setq modus-themes-org-blocks 'gray-background)
  (setq modus-themes-paren-match 'intense-bold)
  (setq modus-themes-prompts 'intense-accented)
  (setq modus-themes-region 'accent)
  (setq modus-themes-scale-1 1.1)
  (setq modus-themes-scale-2 1.15)
  (setq modus-themes-scale-3 1.21)
  (setq modus-themes-scale-4 1.27)
  (setq modus-themes-scale-5 1.33)
  (setq modus-themes-scale-headings nil)
  (setq modus-themes-slanted-constructs t) ; use slanted text (italics) unless it is absolutely necessary, strings and code comments
  (setq modus-themes-subtle-line-numbers t)
  (setq x-underline-at-descent-line t) ; to make the underline not break bottom part of letters, like g (setq modus-themes-syntax 'all-syntax) ; Lots of options---continue reading the manual

  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; Load the theme of your choice:
  (modus-themes-load-operandi)
  ;; (modus-themes-load-vivendi)
  :bind ("<f5>" . #'modus-themes-toggle))
#+end_src
** Maximize the Emacs Frame on Startup

#+begin_src elisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

* Buffers

** Scratch buffer

*** Change initial scratch buffer message

#+begin_src elisp
(setq-default initial-scratch-message ";; Happy hacking d1egoaz - Emacs ♥\n\n")
#+end_src

*** Protect scratch buffer against accidental kill

#+begin_src elisp
(with-current-buffer "*scratch*"
  (emacs-lock-mode 'kill))
#+end_src

*** Initial major mode

#+begin_src elisp
(setq initial-major-mode 'org-mode)
#+end_src

*** Persistent scratch across sessions

#+begin_src elisp
(use-package persistent-scratch
  :init
  (setq persistent-scratch-scratch-buffer-p-function #'(lambda ()(string-match "^*scratch" (buffer-name))))

  (defun diego/make-new-scratch-buffer ()
    "New temporary scratch buffer with a random name."
    (interactive)
    (switch-to-buffer-other-window (concat (make-temp-name "*scratch-") "*"))
    (org-mode))

  (defun diego/make-new-scratch-buffer-go-babel ()
    "New temporary scratch buffer with a random name with go-babel enabled."
    (interactive)
    (switch-to-buffer-other-window (concat (make-temp-name "*scratch-go") "*"))
    (insert "
\#+begin_src go
package main
import \"fmt\"
func main() {
    fmt.Println(\"hello d1egoaz\")
}
\#+end_src
")
    (org-mode))
  :config
  (persistent-scratch-setup-default))
#+end_src

* Mode line

** Make it compact

#+begin_src elisp
(setq mode-line-compact t)
#+end_src

** Format

#+begin_src elisp
(defun diego/current-tab-name ()
  (interactive)
  (alist-get 'name (tab-bar--current-tab)))

(setq-default mode-line-format
              '("%e"
                mode-line-front-space
                "[" (:eval (diego/current-tab-name)) "]"
                " "
                (:eval (if (eq (buffer-local-value 'major-mode (current-buffer)) 'kubel-mode)
                           (kubel-current-state)))
                mode-line-buffer-identification  " "
                mode-line-position
                minions-mode-line-modes
                (vc-mode vc-mode) " "
                mode-line-misc-info
                mode-line-mule-info
                mode-line-client
                mode-line-modified
                mode-line-remote
                mode-line-frame-identification
                mode-line-end-spaces))
#+end_src

** Move evil mode line to beginning

#+begin_src elisp
(setq evil-mode-line-format '(before . mode-line-front-space))
#+end_src

** Hide mode line minor modes

#+begin_src elisp
(use-package minions
  :config
  (setq minions-mode-line-lighter "+")
  (setq minions-direct '(flymake-mode lsp-mode compilation-shell-minor-mode))
  (minions-mode 1))
#+end_src

** Show current command in the mode line (keycast.el)

Keycast mode shows the current command and its key or mouse binding in the mode
line, and updates them whenever another command is invoked.

#+begin_src elisp
(use-package moody) ; required by keycast window predicate

(use-package keycast
  :after moody
  :config
  (setq keycast-window-predicate 'moody-window-active-p)
  (setq keycast-separator-width 1)
  (setq keycast-remove-tail-elements nil)
  (dolist (input '(self-insert-command
                   org-self-insert-command))
    (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

  (dolist (event '(mouse-event-p
                   mouse-movement-p
                   mwheel-scroll))
    (add-to-list 'keycast-substitute-alist `(,event nil)))

  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line."
    :global t
    (if keycast-mode
        (add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update)))

  (add-to-list 'global-mode-string '("" mode-line-keycast " "))
  (set-face-attribute 'keycast-key nil :height 1.0)
  (set-face-attribute 'keycast-command nil :height 0.5)
  (keycast-mode 1))
#+end_src

** Show column number

#+begin_src elisp
(column-number-mode 1) ; Show column number next to line number in mode line
(setq mode-line-position-column-line-format '(" (%l,%c)"))
#+end_src

** Show date and time

#+begin_src elisp
(use-package time
  :init
  (setq display-time-format "%l:%M%p %Y-%m-%d")
  (setq display-time-interval 60)
  (setq display-time-default-load-average nil))
#+end_src

** Project name

#+begin_src elisp
(setq projectile-mode-line-function #'(lambda () (format " Proj[%s]" (projectile-project-name))))
#+end_src

* Windows

** Jump to windows (ace-window.el)

Package for selecting a window to switch to.
https://github.com/abo-abo/ace-window

- Change the action midway:
You can also start by calling ace-window and then decide to switch the action to delete or swap etc. By default the bindings are:

| Keymap | Command                                                |
|--------+--------------------------------------------------------|
| x      | delete window                                          |
| m      | swap windows                                           |
| M      | move window                                            |
| c      | copy window                                            |
| j      | select buffer                                          |
| n      | select the previous window                             |
| u      | select buffer in the other window                      |
| c      | split window fairly, either vertically or horizontally |
| v      | split window vertically                                |
| b      | split window horizontally                              |
| o      | maximize current window                                |
| ?      | show these command bindings                            |
|        |                                                        |

| Keymap  | Command         |
|---------+-----------------|
| SPC w a | Select a window |
| SPC w D | Delete a window |

#+begin_src elisp
(use-package ace-window
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

** Window rules

The =display-buffer-alist= is a rule-set for controlling the placement of windows.

#+begin_src elisp
;; make pop-to-buffer obey display-buffer-alist
(setq switch-to-buffer-obey-display-actions t)

(defun diego--debug-buffer-alist (b a)
  "Clicking a link from the *Help* buffer opens source code in the same window."
  (message "b:%s" b)
  (print a)
  nil)

(defun diego/project-name-from-root (project-root)
  (file-name-nondirectory (directory-file-name project-root)))

(defun diego--display-buffer-from-help-p (b _a)
  "Clicking a link from the *Help* buffer opens source code in the same window."
  (unless current-prefix-arg
    (with-current-buffer (window-buffer)
      (or
       (eq major-mode 'help-mode)
       (eq major-mode 'helpful-mode)))))

(defun diego--display-buffer-from-erc-p (b _a)
  "Clicking a link from the *Help* buffer opens source code in the same window."
  (unless current-prefix-arg
    (with-current-buffer (window-buffer)
       (eq major-mode 'erc-mode))))

(setq display-buffer-alist
      `(
        ;; top side window
        ("\\*world-clock\\*"
         (display-buffer-in-side-window)
         (window-height . 0.16)
         (side . top)
         (slot . -1))
        ("\\*\\(Flymake\\|vc-git :\\).*"
         (display-buffer-in-side-window)
         (window-height . 0.16)
         (side . top)
         (slot . 0))
        ("\\*Messages\\*"
         (display-buffer-in-side-window)
         (window-height . 0.16)
         (side . top)
         (slot . 1))
        ("\\*\\(Backtrace\\|Warnings\\)\\*"
         (display-buffer-in-side-window)
         (window-height . 0.16)
         (side . top)
         (slot . 2)
         (window-parameters . ((no-other-window . t))))
        ;; bottom side window
        ("\\*\\(Embark\\)?.*Completions.*"
         (display-buffer-in-side-window)
         (side . bottom)
         (slot . 0)
         (window-parameters . ((no-other-window . t)
                               (mode-line-format . none))))
        ("\\*kubel.*"
         (display-buffer-in-tab)
         (tab-name . "*kubel*"))
        ("\\*kubel -.*"
         (display-buffer-in-side-window)
         (window-height . 0.8)
         (side . bottom)
         (slot . 0))
        (diego--display-buffer-from-erc-p
         (display-buffer-in-tab)
         (tab-name . "*erc*"))
        ;; left side window
        ("\\*Help.*"
         (display-buffer-in-side-window)
         (window-width . 0.30)
         (side . left)
         (slot . 0))
        ;; if buffer is opened from a help* mode, open it in that window
        (diego--display-buffer-from-help-p
         (display-buffer-in-side-window)
         ;; display-buffer-in-side-window
         (window-width . 0.30)
         (side . left)
         (slot . 0))
        ;; right side window
        ("\\*compilation\\*"
         (display-buffer-in-side-window)
         (window-width . 0.50)
         (side . bottom)
         (slot . 0))
        ("\\*Ilist\\*"
         (display-buffer-in-side-window)
         (window-width . 0.20)
         (side . right)
         (slot . 0))
        ;; bottom buffer (NOT side window)
        ("\\*\\vc-\\(incoming\\|outgoing\\).*"
         (display-buffer-at-bottom))
        ("\\*\\(Output\\|Register Preview\\).*"
         (display-buffer-at-bottom))
        ("\\*.*\\(e?shell\\|v?term\\).*"
         (display-buffer-reuse-mode-window display-buffer-at-bottom)
         (window-height . 0.2))
        ;; below current window
        ("\\*Calendar.*"
         (display-buffer-reuse-mode-window display-buffer-below-selected)
         (window-height . shrink-window-if-larger-than-buffer))
        ("\\*elfeed-search\\*"
         (display-buffer-in-tab)
         (tab-name . "*elfeed*"))
        ("\\*elfeed-entry\\*"
         (display-buffer-in-side-window)
         (side . bottom)
         (window-height . 0.7))
        ;; custom rules
        ;; tabs
        ("\\*scratch.*"
         (display-buffer-in-tab)
         (tab-name . "*scratch*"))
        ;; open buffers in its respective tab, if tab doesn't exist, create it
        ;; idea from https://emacs.stackexchange.com/a/64486
        ((lambda (b _a)
           (buffer-local-value 'buffer-file-name
                               (get-buffer b)))
         display-buffer-in-tab
         (tab-name lambda
                   (b _a)
                   (let
                       ((root
                         (vc-git-root
                          (buffer-file-name b))))

                     (message "root %s"root)
                     (if root
                         (diego/project-name-from-root root)
                       "*special*"))))
        ))
(setq window-combination-resize t)
(setq even-window-sizes 'height-only)
(setq window-sides-vertical nil)
(setq switch-to-buffer-in-dedicated-window 'pop)

(add-hook 'help-mode-hook #'visual-line-mode)
(add-hook 'custom-mode-hook #'visual-line-mode)
(define-key global-map (kbd "<f6>") #'window-toggle-side-windows)
#+end_src

#+begin_src elisp
(defun diego/split-window-horizontally-3 ()
  (interactive)
  (delete-other-windows)
  (split-window-horizontally)
  (split-window-horizontally)
  (balance-windows)
  (other-window -1))

(defun diego/follow-mode-3 ()
  (interactive)
  (diego/split-window-horizontally-3)
  (follow-mode 1))
#+end_src

** Window history (winner.el)

Winner is a built-in tool that keeps a record of buffer and window layout changes.

| Keymap  | Command     |
|---------+-------------|
| SPC w z | Winner undo |
| SPC w r | Winner redo |

#+begin_src elisp
(use-package winner
  :hook
  (after-init-hook . winner-mode))
#+end_src

* Workspaces/tabs (tab-bar.el)

| Keymap      | Command                  |
|-------------+--------------------------|
| SPC TAB TAB | Switch workspaces (tabs) |
| SPC TAB l   | Switch to recent tab     |
| SPC TAB p   | Previous tab             |
| SPC TAB n   | Next tab                 |
| SPC TAB d   | Close tab by name        |

#+begin_src elisp
(use-package tab-bar
  :after projectile
  :general
  (general-nmap
    "gt"  #'tab-next
    "gT"  #'tab-recent)
  :config
  (defun diego/name-tab-by-project-or-default ()
    "Return project name if in a project, or default tab-bar name if not.
The default tab-bar name uses the buffer name."
    (interactive)
    (let ((project-name (projectile-project-name)))
      (if (string= "-" project-name)
          (tab-bar-tab-name-current)
        (projectile-project-name))))

  (setq tab-bar-mode t)

  ;; Get the current tab name for use in some other display
  (defun diego/current-tab-name ()
    (interactive)
    (alist-get 'name (tab-bar--current-tab)))

  (defun diego/tab--tab-bar-tabs ()
    (mapcar (lambda (tab)
              (alist-get 'name tab))
            (tab-bar-tabs)))

  (defun diego/get-buffer-tab ()
    (interactive)
    (let* (
           (tabs (diego/tab--tab-bar-tabs))
           (proj (projectile-project-name))
           )
      (if (member proj tabs)
          (progn
            (tab-switch proj))
        (progn
          (tab-new)
          (tab-rename proj)))))

  (defun diego/create-or-select-tab ()
    (interactive)
    (let* (
           (tabs (diego/tab--tab-bar-tabs))
           (proj (projectile-project-name))
           )
      (if (member proj tabs)
          (progn
            (tab-switch proj))
        (progn
          (tab-new)
          (tab-rename proj)))))

  )

(use-package tab-bar-echo-area
  :config
  (tab-bar-echo-area-mode 1))
#+end_src

* Files

** Don't prompt for confirmation when we create a new file or buffer.

#+begin_src elisp
(setq confirm-nonexistent-file-or-buffer nil)
#+end_src

** Create missing directories when using find file

Create missing directories when we open a file that doesn't exist under a directory tree that may not exist.

#+begin_src elisp
(defun diego/my-create-non-existent-directory ()
  "Automatically create missing directories when creating new files."
  (unless (file-remote-p buffer-file-name)
    (let ((parent-directory (file-name-directory buffer-file-name)))
      (and (not (file-directory-p parent-directory))
           (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory))
           (progn (make-directory parent-directory 'parents)
                  t)))))
(add-to-list 'find-file-not-found-functions #'diego/my-create-non-existent-directory)
#+end_src

** Follow symlinks when opening files.

#+begin_src elisp
(setq vc-follow-symlinks t)
(setq find-file-visit-truename t)
#+end_src

** Disable the warning X and Y are the same file

Which normally appears when you visit a symlinked file by the same name.

#+begin_src  elisp
(setq find-file-suppress-same-file-warnings t)
#+end_src

** Disable file changed on disk messages

Turn the delay on auto-reloading from 5 seconds down to 1 second.  We have to do this before turning
on =auto-revert-mode= for the change to take effect.

#+begin_src elisp
(use-package autorevert
  :straight (:type built-in)
  :config
  (setq auto-revert-interval 1)
  (setq revert-without-query '(".*")) ; disables prompt
  (global-auto-revert-mode 1))
#+end_src

** Restore cursor to last visited place in a file

This means when you visit a file, point goes to the last place where it was when you previously
visited the same file.

#+begin_src elisp
(save-place-mode 1)
#+end_src

* Editor

** Default coding system

#+begin_src elisp
(set-default-coding-systems 'utf-8)
#+end_src

** New line at EOF

Add a newline automatically at the end of the file.

#+begin_src elisp
(setq require-final-newline t)
#+end_src

** Display line numbers and truncated lines

#+begin_src elisp
;; Explicitly define a width to reduce the cost of on-the-fly computation
(setq-default display-line-numbers-width 3)

;; Show absolute line numbers for narrowed regions to make it easier to tell the
;; buffer is narrowed, and where you are, exactly.
(setq-default display-line-numbers-widen t)

;; Enable line numbers in most text-editing modes.
(setq display-line-numbers-type 'relative)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
(add-hook 'text-mode-hook #'display-line-numbers-mode)
(add-hook 'conf-mode-hook #'display-line-numbers-mode)
(global-visual-line-mode 1)
#+end_src

** Highlight current line

#+begin_src elisp
(global-hl-line-mode 1)
#+end_src

** Avoid performance issues with long lines

When the lines in a file are so long that performance could suffer to an unacceptable degree, we say
"so long" to the slow modes and options enabled in that buffer, and invoke something much more basic
in their place.

#+begin_src elisp
(global-so-long-mode 1)
#+end_src

** Underscore =_= and hyphen =-= as a word characters

An underscore =_= is a word character in Vim. This means that word motions like w skip over
underlines in a sequence of letters as if it was a letter itself. In contrast, in Evil the
underscore is often a non-word character like operators, e.g. +.

#+begin_src elisp
(defun diego--treat-chars-as-word-char ()
  (modify-syntax-entry ?/ "w" prog-mode-syntax-table)
  (modify-syntax-entry ?_ "w" prog-mode-syntax-table)
  (modify-syntax-entry ?- "w" prog-mode-syntax-table)

  (modify-syntax-entry ?/ "w" org-mode-syntax-table)
  (modify-syntax-entry ?_ "w" org-mode-syntax-table)
  (modify-syntax-entry ?- "w" org-mode-syntax-table)

  (with-eval-after-load 'ruby
    (modify-syntax-entry ?/ "w" ruby-mode-syntax-table)
    (modify-syntax-entry ?_ "w" ruby-mode-syntax-table)
    (modify-syntax-entry ?- "w" ruby-mode-syntax-table))

  (with-eval-after-load 'html
    (modify-syntax-entry ?/ "w" html-mode-syntax-table)
    (modify-syntax-entry ?_ "w" html-mode-syntax-table)
    (modify-syntax-entry ?- "w" html-mode-syntax-table)))

(add-hook 'after-change-major-mode-hook #'diego--treat-chars-as-word-char)
#+end_src

** Indentation, spaces, and tabs

Favor spaces over tabs.

#+begin_src elisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+end_src

Make =tabify= and =untabify= only affect indentation. Not tabs/spaces in the middle of a line.
#+begin_src elisp
(setq tabify-regexp "^\t* [ \t]+")
#+end_src

** Whitespace cleanup on buffer save

#+begin_src elisp
(use-package whitespace
  :straight (:type built-in)
  :hook
  (before-save-hook . whitespace-cleanup))
#+end_src

** Enable narrowing functions

#+begin_src elisp
(put 'narrow-to-defun  'disabled nil)
(put 'narrow-to-page   'disabled nil)
(put 'narrow-to-region 'disabled nil)
#+end_src

* Let's Be Evil (evil-*.el)

- Cutting and Pasting ::
In emacs, cutting is called killing. Pasting is called yanking.

- Point and Mark ::
The point refers to the cursor. The mark refers to the other side of a selected region (the “active region”).

- Guides ::
https://github.com/noctuid/evil-guide

** evil.el

[[https://github.com/emacs-evil/evil][evil]] is a 'vi' layer for Emacs.

#+begin_src elisp
(use-package evil
  :init
  (setq evil-kill-on-visual-paste nil) ; don't add the replaced text to the kill ring
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil) ; so we can use evil-collection
  (setq evil-want-minibuffer nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-d-scroll t)
  (setq evil-want-C-i-jump t)
  (setq evil-want-C-u-delete t) ; when insert mode
  (setq evil-undo-system 'undo-redo) ; default to natively Emacs 28
  :config
  ;; set up some basic equivalents for vim mapping functions. This creates
  ;; global key definition functions for the evil states.
  (general-evil-setup t) ; https://github.com/noctuid/general.el#vim-like-definers
  (evil-add-command-properties #'evil-goto-definition :jump t)
  (evil-mode 1))

#+end_src

** evil-collection.el

[[https://github.com/emacs-evil/evil-collection][evil-collection]] are Evil bindings for the parts of Emacs that Evil does not cover properly by default, such as
help-mode, M-x calendar, Eshell and more. Some bindings don't make sense, so I'm just enabling it per mode.

Motion ([, ], {, }, (, ), gj, gk, C-j, C-k)

#+begin_src elisp
(use-package evil-collection
  :after (evil general magit)
  :init
  (setq evil-collection-company-use-tng nil) ; I don't want that completion experience
  (setq evil-collection-mode-list nil) ; I don't want surprises, I'll enable it manually by mode
  (setq evil-collection-key-blacklist '("SPC" "SPC m" "C-SPC" "M-SPC" "gd" "gf" "K" "gr" "gR" "[" "]" "gz" "<escape>"))
  (setq evil-collection-setup-minibuffer nil) ; don't setup Vim style bindings in the minibuffer.
  (setq evil-collection-setup-debugger-keys nil)
  :config
  ;; https://github.com/emacs-evil/evil-collection/blob/master/modes/
  (evil-collection-init '(
                          calendar comint company compile
                          diff-mode dired docker docview
                          ediff elfeed elisp-mode elisp-refs eshell
                          flycheck flymake
                          go-mode
                          help helpful
                          ibuffer imenu imenu-list
                          magit ocurr popup
                          vc-annotate vc-dir vc-git
                          vterm wgrep which-key xref))
  (evil-collection-magit-setup))
#+end_src

** goto-chg.el

| Keymap | Command                  |
|--------+--------------------------|
| g;     | goto-last-change         |
| g,     | goto-last-change-reverse |

#+begin_src elisp
(use-package goto-chg :after evil)
#+end_src

** evil-args.el

Motions and text objects for delimited arguments.

For example, =cia~ (~ia= inner arg) transforms:
#+begin_example
function(ar|g1, arg2, arg3)
function(|, arg2, arg3)
#+end_example

=daa= (=aa= outer arg) transforms:
#+begin_example
function(ar|g1, arg2, arg3)
function(|arg2, arg3)
#+end_example

#+begin_src elisp
(use-package evil-args
  :after evil
  :config
  (setq evil-args-delimiters '("," ";" " ")); include space to use in lisp
  :bind (:map
         evil-inner-text-objects-map
         ("a" . #'evil-inner-arg)
         :map
         evil-outer-text-objects-map
         ("a" . #'evil-outer-arg)
         :map
         evil-normal-state-map
         ("L" . #'evil-forward-arg)
         ("H" . #'evil-backward-arg)
         :map
         evil-motion-state-map
         ("H" . #'evil-backward-arg)
         ("L" . #'evil-forward-arg)))
#+end_src

** evil-commentary.el

evil-commentary is an Emacs package for evil-mode that intends to make it easy to comment out (lines of) code:

| Keymap | Command                             |
|--------+-------------------------------------|
| gcc    | comment out a line                  |
| gc~    | comments out the target of a motion |
| gcap   | comment out a paragrah              |
| gc     | comment out selection               |

#+begin_src elisp
(use-package evil-commentary
  :straight (:build (autoloads native-compile))
  :after evil
  :config
  (evil-commentary-mode 1))
#+end_src

** evil-exchange.el

Easy text exchange operator for Evil.

On the first use, define (and highlight) the first {motion} to exchange. On the
second use, define the second {motion} and perform the exchange.

=gx= can also be used from visual mode, which is sometimes easier than coming up with the right {motion}

| Keymap | Command                   |
|--------+---------------------------|
| gx     | evil exchange             |
| .      | repeat motion to exchange |
| gX     | evil exchange cancel      |

#+begin_src elisp
(use-package evil-exchange
  :after evil
  :config
  (evil-exchange-install))
#+end_src

** evil-escape.el

Customizable key sequence to escape from insert state and everything else in Emacs.

#+begin_src elisp
(use-package evil-escape
  :straight (:type git :host github :repo "hlissner/evil-escape")
  :after evil
  :commands evil-escape
  :config
  (setq evil-escape-excluded-states '(normal visual multiedit emacs motion))
  (setq evil-escape-delay 0.2)
  (setq-default evil-escape-key-sequence "jk")
  :hook
  (after-init-hook . evil-escape-mode))
#+end_src

** evil-surround.el

Add/change surrounding to text objects.

| Keymap         | Command                         |
|----------------+---------------------------------|
| S<textobject>  | Add surrounding in region       |
| ys<textobject> | Add surrounding in normal state |
| ds<textobject> | Delete surrounding              |

#+begin_src elisp
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode 1))
#+end_src

** evil Tuning

*** Change cursor color evil-mode

#+begin_src elisp
(setq evil-insert-state-cursor '((bar . 2) "#ff00ff"))
(setq evil-normal-state-cursor '(box "#ff00ff"))
#+end_src

*** Stay on the original character when leaving insert mode

#+begin_src elisp
(setq evil-move-cursor-back nil)
(setq evil-shift-round nil)
#+end_src

*** Make magit commit buffer start in insert mode

#+begin_src elisp
(add-hook 'with-editor-mode-hook #'evil-insert-state)
#+end_src

** better-jump.el

(use-package better-jumper
:init
(global-set-key [remap evil-jump-forward]  #'better-jumper-jump-forward)
(global-set-key [remap evil-jump-backward] #'better-jumper-jump-backward)
(global-set-key [remap xref-pop-marker-stack] #'better-jumper-jump-backward)
:general
(general-nvmap
"C-o" #'better-jumper-jump-backward
"C-i" #'better-jumper-jump-forward)
:config
(defun evil-better-jumper/set-jump-a (orig-fn &rest args)
"Set a jump point and ensure ORIG-FN doesn't set any new jump points."
(better-jumper-set-jump (if (markerp (car args)) (car args)))
(let ((evil--jumps-jumping t)
(better-jumper--jumping t))
(apply orig-fn args)))

;; Create a jump point before jumping with imenu.
(advice-add #'imenu :around #'evil-better-jumper/set-jump-a)
(better-jumper-mode 1))
#+begin_src elisp
#+end_src

* Completion

** Preserve history with savehist-mode

Run =(delete-dups extended-command-history)= for example to delete duplicates
from previous history files.

#+begin_src elisp
(use-package savehist
  :straight (:type built-in)
  :init
  (savehist-mode)
  :config
  (setq history-length 100)
  (setq history-delete-duplicates t))
#+end_src

** Completion framework (company.el)

Company is a modular completion framework. Modules for retrieving completion
candidates are called backends, modules for displaying them are frontends.

#+begin_src elisp
(use-package company
  :config
  (setq company-idle-delay 0.1)
  (setq company-minimum-prefix-length 1)
  (setq company-require-match 'never)
  (setq company-frontends
        '(company-pseudo-tooltip-frontend  ; always show candidates in overlay tooltip
          company-echo-metadata-frontend))  ; show selected candidate docs in echo area
  (setq company-auto-complete nil)
  (setq company-auto-complete-chars nil)

  ;; Only search the current buffer for `company-dabbrev' (a backend that
  ;; suggests text your open buffers). This prevents Company from causing
  ;; lag once you have a lot of buffers open.
  (setq company-dabbrev-other-buffers nil)

  ;; Make `company-dabbrev' fully case-sensitive, to improve UX with
  ;; domain-specific words with particular casing.
  (setq company-dabbrev-ignore-case nil)
  (setq company-dabbrev-downcase nil)

  ;; When candidates in the autocompletion tooltip have additional
  ;; metadata, like a type signature, align that information to the
  ;; right-hand side. This usually makes it look neater.
  (setq company-tooltip-align-annotations t)

  (eldoc-add-command #'company-complete-selection
                     #'company-complete-common
                     #'company-capf
                     #'company-abort)

  ;; Always display the entire suggestion list onscreen, placing it
  ;; above the cursor if necessary.
  (setq company-tooltip-limit 20)
  (setq company-tooltip-minimum company-tooltip-limit)
  (global-company-mode 1)
  :bind (:map
         company-active-map
         ("TAB"   . #'company-complete-selection)
         ("<tab>" . #'company-complete-selection)))
#+end_src

** Selection and Narrowing

Individual packages that work well together.
Vertico, Consult, Embark, Marginalia, and Orderless.

I am loving this new combination of tools. Lightweight and fast.

All of the above try to use the minibuffer's existing hooks and extension
mechanisms, and benefit from large parts of the rest of Emacs using those
mechanisms too. Consequently, they all interop with each other and other parts
of the Emacs ecosystem. You can pick which you want.

*** vertico.el

#+begin_src elisp
(use-package vertico
  :straight (vertico :includes vertico-directory
                     ;; Allow reuse of minibuffer history (like ivy-resume or selectrum-last)
                     :files (:defaults "extensions/vertico-repeat.el" "extensions/vertico-quick.el"))
  :init
  (vertico-mode)
  :config
  (set-face-attribute 'vertico-current nil :background (modus-themes-color 'cyan-intense-bg))
  (setq vertico-resize 'grow-only)
  (setq vertico-cycle t)
  :bind (:map
         vertico-map
         ("\C-<tab>" . #'vertico-quick-insert)
         ("\C-q"     . #'vertico-quick-exit)))
#+end_src

#+begin_src elisp
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  (defun crm-indicator (args)
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Grow and shrink minibuffer
  (setq resize-mini-windows 'grow-only)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete)
  (setq enable-recursive-minibuffers t)
  :hook
  (minibuffer-setup-hook . cursor-intangible-mode))
#+end_src

*** consult.el

Consult is a set of functions to use various Emacs facilities via completing-read.

https://github.com/minad/consult#use-package-example
https://github.com/minad/consult/wiki

M-m quick select
M-i quick insert
M-w copy

#+begin_src elisp
(use-package consult
  :init
  (setq consult-find-command "fd --color=never --full-path ARG OPTS")
  (setq consult-async-refresh-delay 0.3)
  (setq consult-fontify-preserve t)
  (setq completion-in-region-function
        (lambda (&rest args)
          (apply (if vertico-mode
                     #'consult-completion-in-region
                   #'completion--in-region)
                 args)))
  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref)
  (setq xref-show-definitions-function #'consult-xref)
  :config
  (setq consult-preview-key (kbd "C-SPC"))
  ;; (setq consult-preview-key `(,(kbd "C-SPC") :debounce 1 any))

  (setq consult-project-root-function #'vc-root-dir) ; vc.el

  (setq consult-narrow-key ">")
  (setq consult-widen-key "<")
  (setq consult-async-input-debounce 0.5)
  (setq consult-async-input-throttle 0.8)
  (setq consult-async-refresh-delay 0.4)
  (setq consult-async-min-input 1)

  ;; Makes only the open buffers list visible when calling consult-buffer command
  ;; by hiding the other sources, but still allowing the narrowing to recent
  ;; files (by typing f SPC), bookmarks (m SPC) and project buffer and/or files
  ;; (p SPC).  Hide all sources, except normal buffers in consult-buffer by
  ;; default
  (dolist (src consult-buffer-sources)
    (unless (eq src 'consult--source-buffer)
      (set src (plist-put (symbol-value src) :hidden t))))

  ;; https://github.com/minad/consult/issues/6#issuecomment-848077449
  (defvar consult--source-project-file
    `(:name      "Project File"
                 :narrow    (?p . "Project")
                 :hidden    t
                 :category  file
                 :face      consult-file
                 :history   file-name-history
                 :action    ,#'consult--file-action
                 :enabled   ,#'project-current
                 :items     ,(lambda ()
                               (mapcar #'file-relative-name
                                       (project-files (project-current)))))
    "Project file candidate source for `consult-buffer'.")

  :bind (
         ([remap apropos]                       . #'consult-apropos)
         ([remap bookmark-jump]                 . #'consult-bookmark)
         ([remap evil-show-marks]               . #'consult-mark)
         ([remap goto-line]                     . #'consult-goto-line)
         ([remap imenu]                         . #'consult-imenu)
         ([remap load-theme]                    . #'consult-theme)
         ([remap locate]                        . #'consult-locate)
         ([remap org-goto]                      . #'consult-org-heading)
         ([remap switch-to-buffer]              . #'consult-buffer)
         ([remap switch-to-buffer-other-window] . #'consult-buffer-other-window)
         ([remap switch-to-buffer-other-frame]  . #'consult-buffer-other-frame)
         ([remap yank-pop]                      . #'consult-yank-pop)
         ([remap recentf-open-files]            . #'consult-recent-file)))

;; https://github.com/gagbo/consult-lsp
(use-package consult-lsp
  :after (consult lsp-mode)
  :bind
  (:map
   lsp-mode-map
   ([remap xref-find-apropos] . #'consult-lsp-symbols)))

(use-package consult-flycheck
  :after (consult flycheck))
#+end_src

*** embark.el

Embark is a minor mode to allow each minibuffer entry to have multiple actions.

https://github.com/oantolin/embark
https://github.com/oantolin/embark/wiki/Default-Actions

#+begin_src elisp
(use-package embark
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  :config

  ;; If you want to see the actions and their key bindings, but want to use the
  ;; key bindings rather than completing the command name
  (setq embark-action-indicator
        (lambda (map _target)
          (which-key--show-keymap "Embark" map nil nil 'no-paging)
          #'which-key--hide-popup-ignore-command)
        embark-become-indicator embark-action-indicator)
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
  :bind
  (("M-a"                     . #'embark-act)
   ("C-h B"                   . #'embark-bindings)
   ;; alternative for `describe-bindings'
   ([remap describe-bindings] . #'embark-bindings)))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode-hook . consult-preview-at-point-mode))

(with-eval-after-load 'embark
  (with-eval-after-load 'marginalia
    (embark-define-keymap embark-straight-map
      ("u" straight-visit-package-website)
      ("r" straight-get-recipe)
      ("i" straight-use-package)
      ("c" straight-check-package)
      ("F" straight-pull-package)
      ("f" straight-fetch-package)
      ("p" straight-push-package)
      ("n" straight-normalize-package)
      ("m" straight-merge-package))

    (add-to-list 'embark-keymap-alist '(straight . embark-straight-map))

    (add-to-list 'marginalia-prompt-categories '("recipe\\|package" . straight))))
#+end_src

*** marginalia.el

#+begin_example
 "Return symbol class characters for symbol S.
Function:
f function
c command
m macro
! advised
o obsolete
Variable:
u custom
v variable
l local
\* modified
o obsolete
Other:
a face
t cl-type"
#+end_example

#+begin_src elisp
(use-package marginalia
  :init
  (marginalia-mode 1))
#+end_src

*** orderless.el

Orderless is a completion-style to allow convenient filters.

#+begin_src elisp
(use-package orderless
  :straight (orderless :type git :host github :repo "oantolin/orderless")
  :init
  (setq completion-styles '(orderless))
  (setq completion-category-defaults nil)
  ;; Enable `partial-completion' for files to allow path expansion.
  (setq completion-category-overrides '((file (styles . (partial-completion)))))
  (setq completions-format 'one-column)
  (setq completions-detailed t)
  :config
  ;; adapted from https://github.com/minad/consult/wiki#orderless-style-dispatchers-ensure-that-the--regexp-works-with-consult-buffer
  ;; Recognizes the following patterns:
  ;; * =literal literal=
  ;; * ,initialism initialism,
  ;; * !without-literal without-literal!
  ;; * .ext (file extension)
  ;; * regexp$ (regexp matching at end)
  (defun diego/orderless-dispatch (pattern _index _total)
    (cond
     ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
     ((string-suffix-p "$" pattern) `(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x100000-\x10FFFD]*$")))
     ;; File extensions
     ((string-match-p "\\`\\.." pattern) `(orderless-regexp . ,(concat "\\." (substring pattern 1) "[\x100000-\x10FFFD]*$")))
     ;; Ignore single !
     ((string= "!" pattern) `(orderless-literal . ""))
     ;; Without literal
     ((string-prefix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1)))
     ((string-suffix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 0 -1)))
     ;; Initialism strict matching
     ((string-prefix-p "," pattern) `(orderless-strict-initialism . ,(substring pattern 1)))
     ((string-suffix-p "," pattern) `(orderless-strict-initialism . ,(substring pattern 0 -1)))
     ;; Literal matching
     ((string-prefix-p "=" pattern) `(orderless-literal . ,(substring pattern 1)))
     ((string-suffix-p "=" pattern) `(orderless-literal . ,(substring pattern 0 -1)))))

  (setq orderless-matching-styles '(orderless-regexp))
  (setq orderless-style-dispatchers '(diego/orderless-dispatch))
  (setq orderless-skip-highlighting nil)

  ;; Pressing SPC takes you out of completion, so with the default separator you
  ;; are limited to one component, which is no fun. To fix this add a separator
  ;; that is allowed to occur in identifiers, for example, for Emacs Lisp code
  ;; you could use an ampersand:
  (setq orderless-component-separator "[ +]")
  ;; The matching portions of candidates aren’t highlighted. That’s because
  ;; company-capf is hard-coded to look for the completions-common-part face, and
  ;; it only use one face, company-echo-common to highlight candidates.
  (defun just-one-face (fn &rest args)
    (let ((orderless-match-faces [completions-common-part]))
      (apply fn args)))

  (advice-add 'company-capf--candidates :around #'just-one-face))
#+end_src

** Key bindings hints (which-key.el)

[[https://github.com/justbur/emacs-which-key][which-key.el]] is a minor mode for Emacs that displays the key bindings following your currently
entered incomplete command (a prefix) in a popup.

Special SPC, TAB, etc., Single Character a-z,Modifier C-, M-, Other same as default, except single
characters are sorted alphabetically

#+begin_src elisp
(use-package which-key
  :init
  (setq which-key-sort-order #'which-key-key-order-alpha) ;
  (setq which-key-sort-uppercase-first nil) ; I prefer to have lowercase first when there is for example a k and K
  (setq which-key-max-display-columns nil)
  (setq which-key-min-display-lines 10)
  (setq which-key-side-window-slot -10); A negative value means use a slot preceding (that is, above or on the left of) the middle slot.
  (setq which-key-idle-delay 0.3)
  :config
  (which-key-mode 1))
#+end_src

*** Emacs Client

This setting ensures that emacsclient always opens on *dashboard* rather than *scratch*.
https://github.com/emacs-dashboard/emacs-dashboard#emacs-daemon

If t, open the *scratch* buffer.

#+begin_src elisp
(setq initial-buffer-choice t)
#+end_src

* Search And Replace

** Ctrlf (Isearch replacement)

Package `ctrlf' provides a replacement for `isearch' that is more similar to the tried-and-true text
search interfaces in web browsers and other programs (think of what happens when you type ctrl+F).

| Keymap | Command                                           |
|--------+---------------------------------------------------|
| C-s    | search forward literal string                     |
| C-r    | search backward literal string
| C-M-s  | search forward regex                              |
| C-M-r  | search backward regex                             |

#+begin_src elisp
(use-package ctrlf
  :straight (:host github :repo "raxod502/ctrlf")
  :init
  (ctrlf-mode 1)
  :bind
  (("C-s" . #'ctrlf-forward-literal)
   ("C-r" . #'ctrlf-backward-literal)))
#+end_src

** Jumping with (avy.el)

[[https://github.com/abo-abo/avy][avy]] is used to jump to visible text using chars.

#+begin_src elisp
(use-package avy
  :init
  (avy-setup-default))
#+end_src

** imenu-list.el

https://github.com/bmag/imenu-list
Emacs plugin to show the current buffer's imenu entries in a seperate buffer.

#+begin_src elisp
(use-package imenu-list
  :config
  (setq imenu-list-focus-after-activation t)
  (setq imenu-list-auto-resize t)
  (set-face-attribute 'imenu-list-entry-face nil :height 0.7)
  (set-face-attribute 'imenu-list-entry-face-0 nil :height 0.7)
  (set-face-attribute 'imenu-list-entry-face-1 nil :height 0.7)
  (set-face-attribute 'imenu-list-entry-face-2 nil :height 0.7)
  (set-face-attribute 'imenu-list-entry-face-3 nil :height 0.7)
  (set-face-attribute 'imenu-list-entry-subalist-face-0 nil :height 0.7)
  (set-face-attribute 'imenu-list-entry-subalist-face-1 nil :height 0.7)
  (set-face-attribute 'imenu-list-entry-subalist-face-2 nil :height 0.7)
  (set-face-attribute 'imenu-list-entry-subalist-face-3 nil :height 0.7))
#+end_src

** Writable grep (wgrep.el)

With =wgrep= we can directly edit the results of a =grep= and save the
changes to all affected buffers.

To save all buffers that wgrep has changed, run M-x wgrep-save-all-buffers
I then press C-c C-c (wgrep-finish-edit).

consult-line -> embark-export to occur-mode buffer -> occur-edit-mode for editing of matches in buffer.
consult-grep -> embark-export to grep-mode buffer -> wgrep for editing of all matches.

#+begin_src elisp
(use-package wgrep
  :after embark
  :config
  (setq wgrep-auto-save-buffer t)
  :hook
  (embark-after-export-hook . wgrep-change-to-wgrep-mode))
#+end_src

** Visual regex

Package `visual-regexp-steroids' allows `visual-regexp' to use regexp engines other than Emacs'; for
example, Python or Perl regexps.

#+begin_src elisp
(use-package visual-regexp
  :config
  (setq vr/default-replace-preview t))

(use-package visual-regexp-steroids
  :after visual-regexp
  :bind (([remap query-replace-regexp] . #'vr/query-replace)))
#+end_src

* Project Management

** Git

https://github.com/magit/magit

A git client for Emacs.
C-t to turn any magit buffer into text-mode.

Keybindings: https://github.com/emacs-evil/evil-collection/tree/master/modes/magit

*** magit.el

Keys:
https://github.com/emacs-evil/evil-collection/blob/master/modes/magit/evil-collection-magit.el#L280-L309

#+begin_src elisp
(use-package magit
  :config
  (general-nvmap :keymaps 'magit-mode-map
    "zt" #'evil-scroll-line-to-top
    "zz" #'evil-scroll-line-to-center
    "zb" #'evil-scroll-line-to-bottom
    "gr" #'magit-refresh)

  (setq magit-diff-refine-hunk t) ; show granular diffs in selected hunk
  (setq magit-save-repository-buffers nil) ; Don't autosave repo buffers
  ;; Don't display parent/related refs in commit buffers; they are rarely
  ;; helpful and only add to runtime costs.
  (setq magit-revision-insert-related-refs nil)
  (setq magit-diff-refine-ignore-whitespace nil)

  (setq magit-repository-directories
        '(
          ("~/src/github.com/Shopify" . 2)
          ("~/code/" . 2)
          ("~/dotfiles/" . 1)))

  (transient-append-suffix 'magit-fetch "-p"
    '("-t" "Fetch all tags" ("-t" "--tags"))))
#+end_src

*** transient.el

Package `transient' is the interface used by Magit to display popups.
TODO remove use package as it's now part of Emacs

#+begin_src elisp
(use-package transient
  :config
  ;; Allow using `q' to quit out of popups, in addition to `C-g'. See
  ;; <https://magit.vc/manual/transient.html#Why-does-q-not-quit-popups-anymore_003f>
  ;; for discussion.
  (transient-bind-q-to-quit)
  ;; Close transient with ESC
  (define-key transient-map [escape] #'transient-quit-one))
#+end_src

*** git-link.el

#+begin_src elisp
(use-package git-link
  :commands git-link
  :config
  (setq git-link-open-in-browser t))
#+end_src

*** forge.el

#+begin_src elisp
(use-package forge
  :commands forge-create-pullreq)
#+end_src

** project.el

#+begin_src elisp
(use-package project
  :straight (:type built-in)
  :config
  (load (expand-file-name "diego-project.el" user-emacs-directory))
  (setq project-switch-commands '((project-find-file "Find file")
                                  (diego/open-project-readme "README.md")
                                  (consult-ripgrep "Ripgrep")
                                  (magit-status "Git status")
                                  (projectile-recentf "Recent file")))
  :bind (:map
         project-prefix-map
         ("." . #'diego/open-project-readme)
         ("r" . #'consult-ripgrep)
         ("R" . #'projectile-recentf)
         ("m" . #'magit-status)))
#+end_src

** Projectile

https://github.com/bbatsov/projectile

Projectile is a project interaction library for Emacs. Its goal is to provide a nice set of features
operating on a project level without introducing external dependencies.

This library provides easy project management and navigation. The concept of a project is pretty
basic just a folder containing some special file (.git or a file called .projectile).

#+begin_src elisp
(use-package projectile
  :after magit
  :config
  (setq projectile-completion-system 'default) ; to use vertico which relies on default
  (setq projectile-enable-caching t)
  (setq projectile-require-project-root nil) ; run projectile commands on current not project dir
  (mapc #'projectile-add-known-project
        (mapcar #'file-name-as-directory (magit-list-repos)))
  ;; write to persistent `projectile-known-projects-file'
  (projectile-save-known-projects)
  (projectile-global-mode 1))

(use-package recentf
  :config
  (setq recentf-max-menu-items 200)
  (setq recentf-max-saved-items 50)
  (recentf-mode 1))

;; projectile ignored directories
(with-eval-after-load 'projectile
  (add-to-list 'projectile-globally-ignored-directories "vendor"))
#+end_src

** treemacs.el

Treemacs - a tree layout file explorer for Emacs.
https://github.com/Alexander-Miller/treemacs

=oaa= open window with ace
For navigation use j/k, M-n/M-p to move to same-height neighbour u to go to parent.

#+begin_src elisp
(use-package treemacs
  :config
  (setq treemacs-git-mode 'simple)
  (setq treemacs-tag-follow-mode nil)
  (treemacs-resize-icons 12))

(define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action)

(use-package treemacs-evil
  :after (treemacs evil))

(use-package treemacs-projectile
  :after (treemacs projectile))

(use-package lsp-treemacs
  :commands lsp-treemacs-errors-list
  :after lsp-mode
  :config
  (setq lsp-treemacs-detailed-outline nil))

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :config (treemacs-set-scope-type 'Perspectives))

#+end_src

* Development

** Language Server Support (LSP)

https://emacs-lsp.github.io/lsp-mode/page/main-features/
https://github.com/emacs-lsp/lsp-treemacs

- lsp-treemacs-symbols
- lsp-treemacs-errors-list
- lsp-treemacs-references/lsp-treemacs-implementations
- lsp-treemacs-call-hierarchy

- consult-lsp-diagnostics
- consult-lsp-symbols

#+begin_src elisp
(use-package lsp-mode
  :commands lsp-deferred
  :config
  (lsp-enable-which-key-integration t)
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]vendor\\'")

  ;; Project errors on modeline
  (setq lsp-modeline-diagnostics-enable t)
  (setq lsp-modeline-diagnostics-scope :workspace)

  ;; For a UI feedback on headerline of the document
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))

  (define-key lsp-mode-map [remap xref-find-definitions] #'lsp-find-definitions)
  (define-key lsp-mode-map [remap xref-find-references] #'lsp-find-references)


  (evil-add-command-properties #'lsp-find-definition :jump t)
  (evil-add-command-properties #'lsp-goto-type-definition :jump t)

  (advice-add 'lsp-goto-type-definition :before #'evil-set-jump)
  (advice-add 'lsp-find-definition :before #'evil-set-jump)

  :bind (:map
         lsp-mode-map
         ("TAB" . #'completion-at-point)))

(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode
  :config
  ;; Show informations of the symbols on the current line
  (setq lsp-ui-sideline-enable t)
  (setq lsp-ui-sideline-show-hover nil)
  (setq lsp-ui-sideline-show-code-actions t)

  ;; Add peek feature
  (setq lsp-ui-peek-enable t)
  ;; lsp-ui-peek-show-directory show the directory of files

  ;; Show object documentation at point in a child frame.
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-position 'top)

  ;; imenu
  (setq lsp-ui-imenu-enable t)
  (setq lsp-ui-imenu-auto-refresh t)

  :hook ((lsp-mode-hook . lsp-ui-mode)))
#+end_src

** Go

*** Get latest gopls

#+begin_src sh
GO111MODULE=on go get golang.org/x/tools/gopls@latest
#+end_src

*** go-mode.el

#+begin_src elisp
(use-package go-mode
  :after lsp
  :hook
  (go-mode-hook . lsp-deferred)
  :config
  (setq lsp-go-goimports-local "github.com/Shopify/")
  (setq godef-command "go doc") ; original godef
  (setq gofmt-command "goimports") ; original gofmt

  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

  :hook ((go-mode-hook . lsp-go-install-save-hooks)))
#+end_src

*** ob-go.el

Org-Babel support for evaluating go code.
https://github.com/pope/ob-go

#+begin_src elisp
(use-package ob-go
  :after (go-mode org)
  :straight (ob-go :type git :host github :repo "pope/ob-go"))
#+end_src

*** Custom bindings

#+begin_src elisp
(general-define-key
 :states '(normal visual emacs motion)
 :prefix ","
 :non-normal-prefix "M-SPC m"
 :keymaps 'go-mode-map
 "a" #'go-tag-add
 "i" #'go-goto-imports
 "." #'godoc-at-point
 "t"   '(:ignore t :which-key "test")
 "tt" #'diego/go-run-test-current-function)
#+end_src

** Markdown

#+begin_src elisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . #'gfm-mode)
         ("\\.md\\'"       . #'gfm-mode)
         ("\\.markdown\\'" . #'gfm-mode)))
#+end_src

** Misc

#+begin_src elisp
(use-package dockerfile-mode)
(use-package json-mode)
(use-package nix-mode)
(use-package terraform-mode)
(use-package yaml-mode
  :mode (("\\.yml\\'"       . #'yaml-mode)
         ("\\.yaml\\'"      . #'yaml-mode)
         ("\\.yaml.lock\\'" . #'yaml-mode)))
(use-package protobuf-mode)
#+end_src

** Kubernetes

*** kubel.el

To set said namespace and context, respectively call

M-x kubel-set-namespace
M-x kubel-set-context

On the kubel screen, place your cursor on the resource:
|----------+----------------------------------------|
| key      | command                                |
|----------+----------------------------------------|
| \$      | show process buffer                    |
| enter    | get resource details                   |
| a        | jab deployment to force rolling update |
| c        | copy popup                             |
| C        | set context                            |
| d        | delete popup                           |
| e        | exec popup                             |
| E        | quick edit                             |
| F        | set output format                      |
| g        | refresh                                |
| h        | help popup                             |
| l        | log popup                              |
| n        | set namespace                          |
| o        | describe popup                         |
| p        | port forward pod                       |
| m        | unmark item                            |
| u        | unmark item                            |
| M        | mark all                               |
| U        | Unmark all                             |
| R        | set resource                           |
| M-n, M-p | next/previous highlight                |
|----------+----------------------------------------|

#+begin_src elisp
(use-package kubel
  :straight (kubel :host github :repo "d1egoaz/kubel")
  :config
  (evil-define-key 'normal 'kubel-yaml-editing-mode "q" #'kill-current-buffer)
  ;; list namespaces automatically
  ;; (setq kubel-use-namespace-list 'on) ; I'm now using my own branch
  )

(use-package kubel-evil
  :after (kubel evil))
#+end_src

** hideshow.el

Hideshow mode is a buffer-local minor mode that allows you to selectively
display portions of a program, which are referred to as blocks.

;;   hs-hide-block                      C-c @ C-h
;;   hs-show-block                      C-c @ C-s
;;   hs-hide-all                        C-c @ C-M-h
;;   hs-show-all                        C-c @ C-M-s
;;   hs-hide-level                      C-c @ C-l
;;   hs-toggle-hiding                   C-c @ C-c
;;   hs-toggle-hiding                   [(shift mouse-2)]
;;   hs-hide-initial-comment-block

#+begin_src elisp
(use-package hideshow
  :config
  (setq hs-hide-comments-when-hiding-all nil) ; dont' hide the comments too when you do a 'hs-hide-all'

  ;; Global hide/show toggle
  (defvar diego--my-hs-hide nil "Current state of hideshow for toggling all.")
  (defun diego/toggle-hideshow-all ()
    "Toggle hideshow all."
    (interactive)
    (setq diego--my-hs-hide (not diego--my-hs-hide))
    (if diego--my-hs-hide
        (hs-hide-all)
      (hs-show-all)))

  (add-to-list 'hs-special-modes-alist
               `(ruby-mode
                 ,(rx (or "def" "class" "module" "{" "[")) ; Block start
                 ,(rx (or "}" "]" "end"))                  ; Block end
                 ,(rx (or "#" "=begin"))                   ; Comment start
                 ruby-forward-sexp nil))
  :hook
  (go-mode-hook . hs-minor-mode))
#+end_src

** Compilation mode

*** Basic configuration

#+begin_src elisp
(setq comint-input-ignoredups t)
(setq comint-scroll-to-bottom-on-input t) ; always insert at the bottom
(setq comint-scroll-to-bottom-on-output nil) ; always add output at the bottom
'(comint-input-ignoredups t)

;; (setq compilation-scroll-output 'first-error)
(setq compilation-scroll-output t)
(setq compilation-auto-jump-to-first-error t)
#+end_src

*** Enable ASCII Colours

However, most of the time I open a compilation buffer in comint mode, which will
use vterm and won't have any issues.

#+begin_src elisp
(use-package xterm-color
  :config
  (setq compilation-environment '("TERM=xterm-256color"))
  (defun diego--advice-compilation-filter (f proc string)
    (funcall f proc (xterm-color-filter string)))
  (advice-add 'compilation-filter :around #'diego--advice-compilation-filter))
#+end_src

** restclient.el

#+begin_src elisp
(use-package restclient
  :mode ("\\.http\\'" . restclient-mode)
  :general (general-nvmap
             :keymaps 'restclient-mode-map
             :prefix ","
             "e"  #'restclient-http-send-current
             "E"  #'restclient-http-send-current-raw
             "c"  #'restclient-copy-curl-command))
#+end_src

* Productivity

** Syntax checking (flycheck.el)

#+begin_src elisp
(use-package flycheck
  :config
  (global-flycheck-mode 1))
#+end_src

** Snippets (yasnippet.el)

*** yasnippet.el

https://github.com/joaotavora/yasnippet

YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates.

#+begin_src elisp
(use-package yasnippet
  :config
  (setq yas-verbosity 2)
  (setq yas-snippet-dirs `(,(expand-file-name "snippets/" user-emacs-directory)))
  (yas-global-mode 1))
#+end_src

*** Snippets collection

https://github.com/hlissner/doom-snippets

#+begin_src elisp
;; needs files * to download the snippets directories
(use-package doom-snippets
  :after yasnippet
  :straight (doom-snippets :type git :host github :repo "hlissner/doom-snippets" :files ("*.el" "*"))
  :config
  (yas-global-mode 1))
#+end_src

** expand-region.el

https://github.com/magnars/expand-region.el

Emacs extension to increase selected region by semantic units.
er/expand-region

#+begin_src elisp
(use-package expand-region)
#+end_src

** Parens (dumbparens.el)

https://github.com/raxod502/dumbparens/
A simpler version of Smartparens.

(use-package dumbparens
:straight (dumbparens :host github :repo "raxod502/dumbparens")
:init
(setq dumbparens-mode-bindings nil) ; to avoid remapping keys, like C-a
(dumbparens-global-mode))

electric-pair-preserve-balance, when non-nil, makes the default pairing logic balance out the number of opening and closing delimiters.
electric-pair-delete-adjacent-pairs, when non-nil, makes backspacing between two adjacent delimiters also automatically delete the closing delimiter.
electric-pair-open-newline-between-pairs, when non-nil, makes inserting a newline between two adjacent pairs also automatically open an extra newline after point.
electric-pair-skip-whitespace, when non-nil, causes the minor mode to skip whitespace forward before deciding whether to skip over the closing delimiter.
#+begin_src elisp
(use-package elec-pair
  :straight (:type built-in)
  ;; :hook (prog-mode . electric-pair-mode)
  :config
  (electric-pair-mode 1))
#+end_src

** format-all.el

#+begin_src elisp
(use-package format-all)
#+end_src

** vterm.el

#+begin_src elisp
(use-package vterm)
#+end_src

** flyspell.el

#+begin_src elisp
(use-package flyspell
  :after org
  :hook ((prog-mode-hook . flyspell-prog-mode)
         (text-mode-hook . flyspell-mode)))

(use-package flyspell-correct
  :after flyspell)
#+end_src

** Define word

#+begin_src elisp
(use-package define-word)
#+end_src

** buff-move.el

Package `buffer-move' provides simple commands to swap Emacs windows: `buf-move-up',
`buf-move-down', `buf-move-left', `buf-move-right'.

#+begin_src elisp
(use-package buffer-move)
#+end_src

** ripgrep.el

#+begin_src elisp
(use-package ripgrep)
#+end_src

** iedit.el

#+begin_src elisp
(use-package iedit
  :config

;;;###autoload
  (defun diego/iedit-scoped (orig-fn)
    "Call `iedit-mode' with function-local scope, or global scope if called with a universal prefix."
    (interactive)
    (pcase-exhaustive current-prefix-arg
      ('nil (funcall orig-fn '(0)))
      ('(4) (funcall orig-fn))))

  (advice-add #'iedit-mode :around #'diego/iedit-scoped))
#+end_src

** which-function-mode.el

#+begin_src elisp
(which-function-mode 1)
;; Show the current function name in the header line
(setq-default header-line-format
              '((which-function-mode ("" which-func-format " "))))

;; We remove Which Function Mode from the mode line, because it's mostly
;; invisible here anyway.
(setq mode-line-misc-info (assq-delete-all 'which-function-mode mode-line-misc-info))
#+end_src

* Org Mode

** org.el

#+begin_src elisp
(use-package org
  :general
  ;; I prefer C-c C-c over C-c ' (more consistent)
  (:keymaps
   'org-src-mode-map
   "C-c C-c" #'org-edit-src-exit)
  (:keymaps
   'org-mode-map
   "C-j"  #'org-move-subtree-down
   "C-k"  #'org-move-subtree-up)
  ;; local leader
  (general-define-key
   :keymaps 'org-mode-map
   :states '(normal visual emacs motion)
   :prefix ","
   :non-normal-prefix "M-SPC m"
   "'" #'org-edit-special
   "e" #'org-export-dispatch
   "h" #'org-toggle-heading
   "i" #'org-toggle-item
   "q" #'org-set-tags-command
   "t" #'org-todo
   "x" #'org-toggle-checkbox
   "a"   '(:ignore t :which-key "attachments")
   "aa" #'org-attach
   "ar" #'org-attach-reveal
   "au" #'org-attach-url
   "ac" #'org-download-screenshot
   "l"   '(:ignore t :which-key "link")
   "li" #'org-id-store-link
   "ll" 'org-insert-link
   "ls" 'org-store-link
   "d"   '(:ignore t :which-key "date/deadline")
   "dd" #'org-deadline
   "ds" #'org-schedule
   "dt" #'org-time-stamp)
  :init
  (setq org-directory "~/gdrive/deft")
  (setq org-agenda-files (list "~/gdrive/deft/journal.org" "~/gdrive/deft/gtd-inbox.org" "~/gdrive/deft/gtd-personal.org" "~/gdrive/deft/gtd-work.org" ))
  (setq org-attach-id-dir (file-name-as-directory (concat (file-name-as-directory org-directory) "images")))
  (setq org-attach-directory org-attach-id-dir)
  (setq org-default-notes-file (concat (file-name-as-directory org-directory) "notes.org"))
  (setq org-download-image-dir org-attach-directory)
  (setq org-refile-targets '(("~/gdrive/deft/gtd-inbox.org" :maxlevel . 1) ("~/gdrive/deft/gtd-personal.org" :level . 1) ("~/gdrive/deft/gtd-work.org" :maxlevel . 2)))
  :config
  (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
  (setq org-clock-out-remove-zero-time-clocks nil)
  (setq org-cycle-emulate-tab 'white) ; allows to collapse the current outline (call org-cycle)
  (setq org-confirm-babel-evaluate nil)
  (setq org-download-image-html-width 500)
  (setq org-edit-src-content-indentation 0) ; not need to waste space
  (setq org-ellipsis "⌄ ")
  ;; (setq org-hide-leading-stars nil)
  (setq org-hide-leading-stars t)
  (setq org-hide-emphasis-markers nil)
  (setq org-insert-heading-respect-content nil) ; Insert Org headings at point, not after the current subtree
  (setq org-log-into-drawer t)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)     ; we do this ourselves
  (setq org-src-window-setup 'current-window)
  (setq org-startup-with-inline-images t)
  (setq org-todo-keywords '((sequence "TODO(t!)" "WAITING(w!)" "|" "DONE(d!)" "CANCELLED(c!)" "IN-PROGRESS(i!)")))
  (setq org-capture-templates
        '(
          ;; example:
          ;;   "t"                               = key
          ;;   "Todo"                            = description
          ;;   entry                             = type
          ;;   (file+headline "file" "tasks")    = target
          ;;   ""                                = template
          ;;   :prepend t                        = properties
          ;; https://orgmode.org/manual/Template-expansion.html
          ("t" "Todo" entry (file+headline "~/gdrive/deft/gtd-inbox.org" "Inbox")
           "* TODO %?\nCreated on on %U\n" :prepend t :empty-lines 1)
          ("l" "Link" entry (file+headline "~/gdrive/deft/notes.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)
          ("n" "Note" entry (file+headline "~/gdrive/deft/notes.org" "Notes")
           "* %^{title}%^g\n%T\n\n%?" :prepend t)
          ("j" "Journal" entry (file+olp+datetree "~/gdrive/deft/journal.org")
           "* %?\nSCHEDULED: <%(org-read-date nil nil \"today\")>" :clock-in t :clock-resume t))))
#+end_src

** org-download.el

#+begin_src elisp
(use-package org-download
  :commands org-download-screenshot)
#+end_src

** evil-org.el

https://github.com/hlissner/evil-org-mode

key	explanation
gh, gj, gk, gl	navigate between elements
vae	select an element

|------+----------------------+-------------------|
| key  | function             | explanation       |
|------+----------------------+-------------------|
| =gh= | org-element-up       | parent of element |
| =gj= | org-forward-element  | next element      |
| =gk= | org-backward-element | previous element  |
| =gl= | org-down-element     | first subelement  |
| =gH= | evil-org-top         | top-level heading |
|------+----------------------+-------------------|

all keybindings https://raw.githubusercontent.com/hlissner/evil-org-mode/master/doc/keythemes.org

#+begin_src elisp
(use-package evil-org
  :after (evil org)
  :straight (:host github :repo "hlissner/evil-org-mode")
  :config
  ;; enable all bindings
  (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading))
  (defun diego--org-set-key-theme ()
    (evil-org-set-key-theme))
  :hook ((org-mode-hook . evil-org-mode)
         (evil-org-mode-hook . diego--org-set-key-theme)))
#+end_src

** Make org-capture start in insert mode

#+begin_src elisp
(add-hook 'org-capture-mode-hook #'evil-insert-state)
#+end_src

** Org-Babel

#+begin_src elisp
(org-babel-do-load-languages 'org-babel-load-languages
                             '(
                               (dot . t)
                               (shell . t)
                               (gnuplot . t)
                               (latex . t)
                               ))
#+end_src

** Create table of dontents

To use, add a =:TOC:= tag to the headline.
Every time the file is saved, it'll be auto-updated with the current table of contents.

The table of contents heading may also be set with these tags:

- =:TOC_#:= Sets the maximum depth of the headlines in the table of
  contents to the number given, e.g. :TOC_3: for
  3 (default for plain :TOC: tag is 2).

- =:TOC_#_gh:= Sets the maximum depth as above and also uses
  GitHub-style anchors in the table of contents (the
  default).  The other supported style is :TOC_#_org:,

  #+begin_src elisp
  (use-package toc-org
    :after (org markdown-mode)
    :config
    (setq toc-org-max-depth 2)
    :hook ((org-mode-hook . toc-org-mode)
           (markdown-mode-hook . toc-org-mode)))
  #+end_src

** iMenu org depth

Increase the maximum level for Imenu access to Org headlines.

#+begin_src elisp
(setq org-imenu-depth 6)
#+end_src

* Misc

** helpful.el

[[https://github.com/Wilfred/helpful][helpful.el]] is an alternative to the built-in Emacs help that provides much more contextual information.

#+begin_src elisp
(use-package helpful
  :bind (
         ([remap describe-function] . #'helpful-callable)
         ([remap describe-variable] . #'helpful-variable)
         ([remap describe-symbol]   . #'helpful-symbol)
         ([remap describe-key]      . #'helpful-key))
  :general
  (general-nmap :keymaps 'helpful-mode-map
    "q" #'kill-buffer-and-window))
#+end_src

Always select the help window (t).
#+begin_src elisp
(setq help-window-select t)
#+end_src

** all-the-icons.el

To have some icons available in doom mode line.

#+begin_src elisp
(use-package all-the-icons)
(use-package all-the-icons-dired)
#+end_src

** World Clock

Tz zones: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
=format-time-string= for time format. ISO 8601 format =%FT%T%z=.

#+begin_src elisp
(use-package time
  :general
  (:keymaps 'world-clock-mode-map
            "q" #'kill-buffer-and-window)
  :config
  (setq zoneinfo-style-world-list '(("etc/UTC" "UTC")
                                    ("US/Pacific" "PT")
                                    ("America/New_York" "ET")
                                    ("America/Bogota" "Bogota")
                                    ("America/Toronto" "Toronto")))
  (setq world-clock-time-format "%A %d %B %R (%Z %z) %FT%T%z")
  (setq world-clock-buffer-name "*world-clock*") ; Placement handled by `display-buffer-alist'
  :hook
  (after-init-hook . display-time-mode))
#+end_src

** olivetti.el

#+begin_src elisp
(use-package olivetti
  :config
  (setq olivetti-minimum-body-width 200)
  (setq olivetti-recall-visual-line-mode-entry-state t)

  (define-minor-mode diego/olivetti-mode
    "Toggle buffer-local `olivetti-mode' with additional parameters."
    :init-value nil
    :global nil
    (if diego/olivetti-mode
        (progn
          (olivetti-mode 1)
          (set-window-fringes (selected-window) 0 0))
      (olivetti-mode -1)
      (set-window-fringes (selected-window) nil))))
#+end_src

** RSS (elfeed.el)

https://github.com/skeeto/elfeed
The best RSS reader.

#+begin_src elisp
(use-package elfeed
  :after olivetti
  :general
  (general-nmap :keymaps 'elfeed-search-mode-map
    "c" #'elfeed-search-clear-filter
    "s" #'elfeed-search-live-filter
    "r" #'elfeed-search-untag-all-unread
    "," #'diego/elfeed-filter)
  :commands elfeed
  :config
  (setq elfeed-search-date-format '("%a %b-%d" 10 :left))
  (setq elfeed-search-filter "@2-week-ago +unread")
  (setq elfeed-search-title-max-width 120)
  (setq elfeed-show-truncate-long-urls t)
  (setq elfeed-sort-order 'ascending)

  (defun diego/elfeed-filter-do ()
    (interactive)
    (let ((tags (mapconcat 'identity (transient-args 'diego/elfeed-filter) " ")))
      (elfeed-search-clear-filter)
      (elfeed-search-set-filter (format "@2-weeks-ago +unread %s" tags))
      (goto-char (point-min))))

  (define-transient-command diego/elfeed-filter ()
    [["Arguments"
      ("a" "apple" "+apple")
      ("c" "Tech Crunch" "+techcrunch")
      ("e" "emacs" "+emacs")
      ("h" "Hacker News" "+hnews")
      ("l" "linux" "+linux")
      ("t" "top" "+top")
      ("s" "sre" "+sre")
      ("v" "verge" "+theverge")]
     ["Reddit"
      ("p" "r/Programming" "+programming")]
     ["Actions"
      ("f" "apply" diego/elfeed-filter-do)
      ("u" "update" elfeed-update)]])

  :hook ((elfeed-search-mode-hook . diego/olivetti-mode)
         (elfeed-show-mode-hook . diego/olivetti-mode)))

(use-package elfeed-org
  :after elfeed
  :config
  (setq rmh-elfeed-org-files (list "~/gdrive/deft/elfeed.org"))
  (elfeed-org))
#+end_src

** rainbow-mode.el

#+begin_src elisp
(use-package rainbow-mode)
#+end_src

** emacs-everywhere.el

By default, emacs-everywhere-insert-selection is a hook in
emacs-everywhere-init-hooks, and will insert the last text selection into your
new buffer. To clear this, type DEL or C-SPC before anything else.

Once you’ve finished and want to insert the text into the window you triggered
Emacs Everywhere from, just press C-c C-c.

#+begin_src elisp
(use-package emacs-everywhere
  :config
  (setq emacs-everywhere-markdown-apps '("Discord" "Slack"))
  (setq emacs-everywhere-frame-parameters
        `((name . "emacs-everywhere")
          (width . 120)
          (height . 20))))

;; to signal emacs-everywhere to use org-gfm-export-to-markdown
(use-package ox-gfm
  :after org
  :config
  (require 'ox-gfm nil t))
#+end_src
** erc

#+begin_src elisp
(use-package erc
  :straight (:type built-in)
  :config
  (setq erc-auto-query 'bury)
  (setq erc-autojoin-channels-alist '(("irc.libera.chat" "#emacs")))
  (setq erc-hide-list '("JOIN" "PART" "QUIT" "NICK"))
  (setq erc-kill-buffer-on-part nil)
  (setq erc-kill-server-buffer-on-quit t)
  (setq erc-nick "d1egoaz")
  (setq erc-prompt-for-password nil)
  (setq erc-rename-buffers t) ; Rename server buffers to reflect the current network name instead of SERVER:PORT (e.g., "freenode" instead of "irc.freenode.net:6667").
  (setq erc-server "irc.libera.chat"))
#+end_src

* Keybindings

** Simplify Leader Bindings (general.el)

[[https://github.com/noctuid/general.el][general.el]] allows us to set keybindings.

=general.el= is installed in early-init.el.*

** Bindings

#+begin_src elisp
;; ** Global Keybindings

;; repeat last macro with Q
(define-key evil-normal-state-map "Q" (kbd "@@"))

;; ESC Cancels All
(define-key global-map [escape] #'keyboard-escape-quit)
(global-set-key (kbd "M-o") #'ace-window)

(general-define-key
 :states '(normal visual emacs motion) ; some modes for some reason start in motion mode
 :keymaps 'override
 :prefix "SPC"
 :non-normal-prefix "M-SPC"
 "" nil ; to fix evil in some buffers, like *Messages*
 "SPC"     #'(execute-extended-command :which-key "M-x")
 "'"       #'(vertico-repeat :which-key "Resume last search")
 ">"       #'(er/expand-region :which-key "Expand region")
 "u"       #'(universal-argument :which-key "Universal argument")
 "U"       #'(universal-argument-more :which-key "Universal argument more")
 "x"       #'((lambda () (interactive) (switch-to-buffer "*scratch*")) :which-key "Scratch buffer")
 ;; Tabs
 "TAB"     '(:ignore t :which-key "workspaces")
 "TAB TAB" #'(tab-switch :which-key "Switch workspace")
 "TAB d"   #'(tab-bar-close-tab :which-key "Close workspace")
 "TAB D"   #'(tab-bar-close-tab-by-name :which-key "Close workspace by name")
 "TAB p"   #'(tab-previous :which-key "Previous workspace")
 "TAB n"   #'(tab-next :which-key "Next workspace")
 "TAB l"   #'(tab-recent :which-key "Recent workspace")
 ;; Apps
 "a"       '(:ignore t :which-key "apps")
 "ac"      #'(world-clock :which-key "World clock")
 "ad"      #'(dired-jump :which-key "Dired current dir")
 "ae"      #'(elfeed :which-key "Elfeed - RSS")
 "ak"      #'(kubel :which-key "Kubel")
 "ap"      #'(list-processes :which-key "List process")
 "aP"      #'(list-processes :which-key "Kill process")
 "at"      #'(treemacs-display-current-project-exclusively :which-key "Treemacs project")
 "aT"      #'(treemacs :which-key "Toggle Treemacs")
 "av"      #'vterm
 ;; Buffers
 "b"       '(:ignore t :which-key "buffers")
 "bb"      #'(consult-buffer :which-key "Switch buffer")
 "bB"      #'(ibuffer-list-buffers :which-key "Ibuffer list buffers")
 "bc"      #'(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
 "bC"      #'((lambda () (interactive) (switch-to-buffer "*compilation*")) :which-key "Compilation buffer")
 "bd"      #'(kill-current-buffer :which-key "Kill current buffer")
 "be"      #'(diego/safe-erase-buffer :which-key "Erase buffer")
 "bE"      #'(view-echo-area-messages :which-key "Echo area buffer")
 "bf"      #'(format-all-buffer :which-key "Format buffer")
 "bi"      #'(diego/indent-buffer :which-key "Indent buffer")
 "bK"      #'(kill-buffer :which-key "Kill buffer")
 "bl"      #'(evil-switch-to-windows-last-buffer :which-key "Switch to last buffer")

 "bm"      '(:ignore t :which-key "move buffer")
 "bmk"     #'(buf-move-up :which-key "Move up")
 "bmj"     #'(buf-move-down :which-key "Move down")
 "bmh"     #'(buf-move-left :which-key "Move left")
 "bml"     #'(buf-move-right :which-key "Move right")

 "bM"      #'view-echo-area-messages
 "bn"      #'(next-buffer :which-key "Next buffer")
 "bp"      #'(previous-buffer :which-key "Previous buffer")
 "bs"      #'(basic-save-buffer :which-key "Save buffer")
 "bS"      #'(evil-write-all :which-key "Save all buffers")
 "by"      #'(diego/copy-buffer-name :which-key "Yank buffer name")
 "bY"      #'(diego/copy-whole-buffer-to-clipboard :which-key "Copy buffer to clipboard")
 ;; Compile
 "c"       '(:ignore t :which-key "compile")
 "cc"      #'recompile
 "cC"      #'diego/project-compile

 "cd"     #'diego/dev
 "cD"     #'diego/dev-project
 ;; Evaluate elisp expressions
 "e"       '(:ignore t :which-key "eval/error")
 "eb"      #'(eval-buffer :which-key "Eval elisp in buffer")
 "ed"      #'(eval-defun :which-key "Eval defun")
 "ee"      #'(eval-expression  :which-key "Eval elisp expression")
 "el"      #'(eval-last-sexp :which-key "Eval last sexression")
 "er"      #'(eval-region :which-key "Eval region")
 "en"      #'(next-error :which-key "Next error")
 "ep"      #'(previous-error :which-key "Previous error")
 ;; Files
 "f"       '(:ignore t :which-key "files")
 "fC"      #'(copy-file :which-key "Copy file")
 "fD"      #'(delete-file :which-key "Delete file")
 "ff"      #'(find-file :which-key "Find file")
 "fj"      #'((lambda () (interactive) (find-file "~/gdrive/deft/journal.org")) :which-key "Journal file")
 "fp"      #'((lambda () (interactive) (find-file (expand-file-name "config.org" user-emacs-directory))) :which-key "Edit private config")
 "fr"      #'(consult-recent-file :which-key "Recent files")
 "fR"      #'(rename-file :which-key "Rename file")
 "fs"      #'(save-buffer :which-key "Save file")
 "fS"      #'(write-file :which-key "Save file as...")
 "fy"      #'(diego/copy-file-name :which-key "Yank file path")
 ;; Git
 "g"       '(:ignore t :which-key "git")
 "ga"      #'(vc-annotate :which-key "Annotate, show edit history") ;; f vc-annotate-find-revision-at-line, l vc-annotate-show-log-revision-at-line, D, F, J
 "gs"      #'(magit-status :which-key "Magit status")
 "gF"      #'magit-fetch-all

 "gl"      '(:ignore t :which-key "git link")
 "glh"      #'git-link-homepage
 "gll"     #'(git-link :which-key "git link in current branch")
 "glm"     #'((lambda () (interactive) (let ((git-link-default-branch "master"))(call-interactively #'git-link))) :which-key "git link in master")

 "gL"      #'magit-log
 "gv"      #'((lambda () (interactive)(vc-revision-other-window "master")) :which-key "Visit file in master branch")
 ;; Help
 "h"       '(:ignore t :which-key "help")
 "ha"      #'(consult-apropos :which-key "Describe apropos")
 "hf"      #'(describe-function :which-key "Describe function/macro")
 "hF"      #'(describe-face :which-key "Describe face")
 "hk"      #'(helpful-key :which-key "Describe key")
 "hl"      #'(find-library :which-key "Describe library")
 "hm"      #'(describe-mode :which-key "Describe mode")
 "hp"      #'(helpful-at-point :which-key "Describe at point")
 "ho"      #'(describe-symbol :which-key "Describe symbol")
 "hv"      #'(describe-variable :which-key "Describe variable")
 "hw"      #'define-word-at-point
 "hW"      #'dictionary-search
 "hr"      #'((lambda () (interactive) (load-file (expand-file-name "init.el" user-emacs-directory))) :which-key "Reload emacs config")
 ;; Insert
 "i"       '(:ignore t :which-key "insert")
 "iu"      #'(insert-char :which-key "Unicode char")
 "is"      #'(yas-insert-snippet :which-key "Snippet")
 "ik"      #'(diego/evil-insert-line-above :which-key "Line above")
 "ij"      #'(diego/evil-insert-line-below :which-key "Line below")
 "iy"      #'(consult-yank-pop :which-key "Insert Yank")
 ;; Jump
 "j"       '(:ignore t :which-key "jump")
 "ji"      #'imenu
 "jI"      #'imenu-list
 "jb"      #'(bookmark-jump :which-key "Jump to bookmark")
 "jB"      #'(bookmark-set :which-key "Set bookmark")
 "jj"      #'(avy-goto-char-timer :which-key "Jump to char")
 "jl"      #'(avy-goto-line :which-key "Jump to line")
 "jh"      #'(evil-show-jumps :which-key "Jump history")
 "jm"      #'(evil-show-marks :which-key "Jump to mark")
 "jo"      #'consult-outline
 "ju"      #'(ffap-menu :which-key "Jump to URL")
 "jr"      #'(consult-buffer :which-key "Jump to recent file/buffer")
 ;; LSP
 "l"       '(:ignore t :which-key "lsp")
 "lc"      #'lsp-treemacs-call-hierarchy
 "ld"      #'xref-find-definitions
 "le"      #'lsp-ui-flycheck-list
 "li"      #'lsp-goto-type-implementation
 "ln"      #'lsp-ui-find-next-reference
 "lp"      #'lsp-ui-find-prev-reference
 "lr"      #'xref-find-references
 "lR"      #'lsp-rename
 "lt"      #'lsp-goto-type-definition
 "lX"      #'lsp-execute-code-action
 "ls"       #'(lsp-signature-activate :which-key "show signature")
 "lh"       #'(highlight-symbol-at-point :which-key "highliht symbol at point")
 ;; local mode/leader
 "m"       '(:ignore t :which-key "local mode")
 ;; Narrow
 "n"       '(:ignore t :which-key "notes/narrow")
 "nf"      #'(narrow-to-defun :which-key "Narrow function")
 "nr"      #'(narrow-to-region :which-key "Narrow region")
 "nw"      #'(widen :which-key "Narrow widen/remove")
 ;; Org/Other
 "o"       '(:ignore t :which-key "org/other")
 "oa"      #'org-agenda
 "oc"      #'(org-capture :which-key "capture")
 "oo"      #'(org-open-at-point :which-key "open link at point")
 "ot"      #'(org-todo :which-key "todo")
 "oT"      #'org-todo-list

 "ol"      '(:ignore t :which-key "org-link")
 "oli"     #'org-insert-link
 "ols"     #'org-store-link

 "oO"      '(:ignore t :which-key "other")
 "oOd"     #'(diego/delete-last-char-eol :which-key "Delete last char EOL")
 ;; Project
 "p"       '(:ignore t :which-key "project")
 "!"       #'(projectile-run-shell-command-in-root :which-key "Run cmd in project root")
 "pa"      #'(projectile-add-known-project :which-key "Add new project")
 "pb"      #'(project-switch-to-buffer :which-key "Project buffer")
 "pf"      #'(project-find-file :which-key "Project file")
 "pd"      #'(projectile-find-dir :which-key "Project dir")
 "pk"      #'(projectile-kill-buffers :which-key "Kill project buffers")
 "pp"      #'(project-switch-project :which-key "Switch project")
 ;; "ps"   #'((lambda () (interactive) (consult-ripgrep (projectile-acquire-root))) :which-key "Project search")
 "pr"      #'(projectile-recentf :which-key "Project recent files")
 "pv"      #'(projectile-run-vterm :which-key "Project vterm")
 ;; Profiler
 "P"       '(:ignore t :which-key "profiler")
 "Ps"      #'(profiler-start :which-key "Profiler start")
 "Pk"      #'(profiler-stop :which-key "Profiler stop")
 "Pr"      #'(profiler-report :which-key "Profiler report")
 ;; Search
 "s"       '(:ignore t :which-key "search")
 "se"      #'(iedit-mode :which-key "iedit") ; next item TAB
 "sg"      #'(consult-grep :which-key "Search")
 "sr"      #'replace-regexp
 "ss"      #'(consult-line :which-key "Search")
 ;; "sp"   #'((lambda () (interactive) (consult-ripgrep (projectile-acquire-root))) :which-key "Search in project")
 "sp"      #'(consult-ripgrep :which-key "Search in project")
 ;; Toggle
 "t"       '(:ignore t :which-key "toggle")
 "tf"      #'toggle-frame-fullscreen
 "th"      #'(hs-toggle-hiding :which-key "Hide/Show block")
 "tH"      #'(diego/toggle-hideshow-all :which-key "Hide/Show All")
 "tn"      #'(global-display-line-numbers-mode :which-key "Line numbers")
 "tt"      #'toggle-truncate-lines
 "tT"      #'(consult-theme :which-key "Toggle theme")
 "tv"      #'variable-pitch-mode
 "tw"      #'whitespace-mode
 "tW"      #'(visual-line-mode :which-key "Soft line wrapping")
 ;; Quit/Restart
 "q"       '(:ignore t :which-key "quit/restart")
 "qf"      #'(delete-frame :which-key "Delete frame")
 "qq"      #'(kill-emacs :which-key "Quit Emacs")
 ;; Window manipulation
 "w"       '(:ignore t :which-key "windows")
 "wa"      #'ace-window
 "wb"      #'balance-windows
 "wB"      #'balance-windows-area
 "w-"      #'(evil-window-split :which-key "Horizontal split window")
 "w/"      #'(evil-window-vsplit :which-key "Vertical split window")
 "wd"      #'(evil-window-delete :which-key "Close window")
 "wD"      #'ace-delete-window

 "we"      '(:ignore t :which-key "enlarge")
 "wel"     #'enlarge-window-horizontally
 "weh"     #'shrink-window-horizontally

 "wf"      #'fit-window-to-buffer
 "wF"      #'diego/follow-mode-3
 "wh"      #'(evil-window-left :which-key "Window left")
 "wj"      #'(evil-window-down :which-key "Window down")
 "wk"      #'(evil-window-up :which-key "Window up")
 "wl"      #'(evil-window-right :which-key "Window right")
 "wm"      #'(delete-other-windows :which-key "Maximize window")
 "wz"      #'winner-undo
 "wr"      #'winner-redo)
#+end_src

* Functions

- TODO: document each fn

#+begin_src elisp
(defun diego/indent-buffer ()
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max) nil)))

(defun diego/delete-last-char-eol ()
  "Delete last character in line"
  (interactive)
  (save-excursion
    (move-end-of-line 1)
    (delete-backward-char 1)))

(defun diego/emoji-disapproval () (interactive) (insert "ಠ_ಠ"))
(defun diego/emoji-shrug () (interactive) (insert "¯\\_(ツ)_/¯"))
(defun diego/emoji-table-flip () (interactive) (insert "(╯°□°）╯︵ ┻━┻"))
(defun diego/emoji-glasses () (interactive) (insert "(⌐■_■)"))
(defun diego/emoji-idonteven () (interactive) (insert "¯\(°_°)/¯"))

(defun diego/copy-buffer-name ()
  "copy buffer name"
  (interactive)
  (let ((path (file-name-nondirectory (buffer-file-name))))
    (message path)
    (kill-new path)))

(defun diego/copy-file-name ()
  "copy buffer name"
  (interactive)
  (let ((path (buffer-file-name)))
    (message path)
    (kill-new path)))

(defun diego/copy-buffer-dir-path ()
  "copy buffer path to clipboard"
  (interactive)
  (message default-directory)
  (kill-new default-directory))

(defun diego/url-to-markdown-image ()
  "copy url from clipboard and creates an url src image to paste in a markdown document"
  (interactive)
  (kill-new
   (format "<img src=\"%s\" width=\"50%%\" />" (current-kill 0))))

(defun diego/today-UTC-date ()
  "copy the full UTC time to clipboard"
  (interactive)
  "Inserts the current date in the buffer"
  ;; nil to use current date, t to use UTC
  (insert (format-time-string "%Y-%m-%dT%H:%M:%SZ" nil t)))

(defun diego/now ()
  "Inserts the current time in the buffer"
  (interactive)
  (insert (format-time-string "%H:%M:%S PT")))

(defun diego--exec-command-replace-region (command)
  (interactive)
  (unless mark-active
    (mark-whole-buffer))
  (shell-command-on-region
   (region-beginning) (region-end)
   command
   (current-buffer) t "*diego/error-buffer*" t))

(defun diego/minify-json ()
  "minify json current region"
  (interactive)
  (diego--exec-command-replace-region "jq -ScM ."))

(defun diego/prettify-json ()
  "prettify json current region"
  (interactive)
  (diego--exec-command-replace-region "jq -SM ."))

(defun diego/resize-image ()
  (interactive)
  (let ((str (concat "convert \"" buffer-file-name "\" -geometry x300 \"" buffer-file-name "\"")))
    (message str)
    (shell-command-to-string str)))

(defun diego/fetch-and-rebase-onto-origin-master ()
  (interactive)
  (magit-fetch-branch "origin" "master" nil)
  (magit-git-rebase "origin/master" nil))

(defun diego/fetch-origin-master ()
  (interactive)
  (magit-fetch-branch "origin" "master" nil))

(defun diego/git-create-branch-from-origin-master ()
  "Creates a new branch starting from origin/master."
  (interactive)
  (diego/fetch-origin-master)
  (let ((new_branch_name (read-from-minibuffer "New branch name (from origin/master): " "diego_")))
    (magit-git-command-topdir
     (concat "git checkout -b " new_branch_name " origin/master"))))

(defun diego/prettify-jsonv2 ()
  "prettify json current region"
  (interactive)
  (diego--exec-command-replace-region "prettier --parser json"))

(defun diego/prettify-markdown ()
  "prettify markdown current region"
  (interactive)
  (diego--exec-command-replace-region "prettier --parser markdown"))

(defun diego/prettify-yaml ()
  "prettify yaml current region"
  (interactive)
  (diego--exec-command-replace-region "prettier --parser yaml"))

(defun diego/visit-pull-request-url ()
  "Visit the current branch's PR on Github."
  (interactive)
  (browse-url
   (format "https://github.com/%s/pull/new/%s"
           (replace-regexp-in-string
            "\\`.+github\\.com:\\(.+\\)\\.git\\'" "\\1"
            (magit-get "remote"
                       (magit-get-push-remote)
                       "url"))
           (magit-get-current-branch))))

(defun diego/kill-close-all-buffers ()
  (interactive)
  (let ((keep '("*scratch* *Messages*")))
    (switch-to-buffer "*scratch*")
    (delete-other-windows)
    (mapc
     (lambda (b)
       (unless (member (buffer-name b) keep)
         (kill-buffer b)))
     (buffer-list))))

(defun diego/safe-erase-buffer ()
  "Prompt before erasing the content of the file."
  (interactive)
  (if (y-or-n-p (format "Erase content of buffer %s ? " (current-buffer)))
      (erase-buffer)))

(defun diego/copy-whole-buffer-to-clipboard ()
  "Copy entire buffer to clipboard"
  (interactive)
  (clipboard-kill-ring-save (point-min) (point-max)))

(defun diego/evil-insert-line-above (count)
  "Insert one or several lines above the current point's line without changing
    the current state and point position."
  (interactive "p")
  (dotimes (_ count) (save-excursion (evil-insert-newline-above))))

(defun diego/evil-insert-line-below (count)
  "Insert one or several lines below the current point's line without changing
    the current state and point position."
  (interactive "p")
  (dotimes (_ count) (save-excursion (evil-insert-newline-below))))

(defun diego/autocapitalize-org-headings ()
  "Find org headings and capitalize first word"
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (not (eobp))
      (org-next-visible-heading 1)
      (forward-to-word 1)
      (while (member (word-at-point) '("TODO" "DONE" "CANCELLED"))
        (forward-to-word 1))
      (upcase-char 1))))

(defun diego/insert-uuid ()
  (interactive)
  (insert (shell-command-to-string "uuidgen")))


(defun diego/vterm ()
  "Switch to (or create) a general vterm called diego/vterm."
  (interactive)
  (delete-other-windows)
  (if (get-buffer "diego/vterm")
      (progn
        (set-buffer "diego/vterm")
        (switch-to-buffer "diego/vterm"))
    (vterm "diego/vterm")))

(defun diego/insert-filename ()
  "Insert a filename at point."
  (interactive)
  (insert (read-file-name "File:")))

(defun diego/insert-relative-filename ()
  "Insert a relative filename at point."
  (interactive)
  (insert (file-relative-name (read-file-name "File: "))))

(defun diego/browse-current-file ()
  "Open the current file as a URL using `browse-url'."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (browse-url (concat "file://" file-name))))

(defun diego/what-the-commit ()
  (interactive)
  (insert
   (with-current-buffer
       (url-retrieve-synchronously "http://whatthecommit.com")
     (re-search-backward "<p>\\([^<]+\\)\n<\/p>")
     (match-string 1))))

(defun diego/google-meet ()
  "Open Google Meet with Safari with my Google company profile.
For some reason I'm having video issues with Firefox."
  (interactive)
  (setq browse-url-chrome-program "/Applications/Safari.app/Contents/MacOS/Safari")
  (browse-url-chrome "https://meet.google.com/?authuser=1"))

(defun diego/make-orgcapture-frame ()
  "Create a new frame and run org-capture."
  (interactive)
  (make-frame '((name . "alfredoc") (width . 80) (height . 16)
                (top . 400) (left . 300)))
  (select-frame-by-name "alfredoc")
  (org-capture))

(defun diego/project-compile-dwim (command)
  "Run `diego/compile' in the project root."
  (declare (interactive-only compile))
  (interactive)
  (let ((default-directory (project-root (project-current t)))
        (compilation-buffer-name-function
         (or project-compilation-buffer-name-function
             compilation-buffer-name-function)))
    (diego/compile command)))

(defun diego/project-compile ()
  "Run `diego/compile' in the project root."
  (declare (interactive-only compile))
  (interactive)
  (let ((default-directory (project-root (project-current t)))
        (compilation-buffer-name-function
         (or project-compilation-buffer-name-function
             compilation-buffer-name-function)))
    (diego/compile (completing-read "Compile command: " compile-history))))

(defun diego/compile (command)
  "Copied from compile, but passing t at the last line to enable comint on a
vterm buffer."
  (interactive
   (list
    (let ((command (eval compile-command)))
      (if (or compilation-read-command current-prefix-arg)
          (compilation-read-command command)
        command))
    (consp current-prefix-arg)))
  (unless (equal command (eval compile-command))
    (setq compile-command command))
  (save-buffer)
  (save-some-buffers (not compilation-ask-about-save)
                     compilation-save-buffers-predicate)
  (setq-default compilation-directory default-directory)
  (compilation-start command t))

(defun diego/consult-line-symbol-at-point ()
  (interactive)
  (consult-line (thing-at-point 'symbol)))

(defun diego/go-run-test-current-function ()
  (interactive)
  (if (string-match "_test\\.go" buffer-file-name)
      (save-excursion
        (move-end-of-line nil)
        (re-search-backward "^func[ ]+\\(([[:alnum:]]*?[ ]?[*]?\\([[:alnum:]]+\\))[ ]+\\)?\\(Test[[:alnum:]_]+\\)(.*)")
        (diego/compile (concat "go test -v -run=" (match-string-no-properties 3))))
    (message "Must be in a _test.go file to run go-run-test-current-function")))

;; from https://github.com/alphapapa/unpackaged.el
(defun diego/org-fix-blank-lines (&optional prefix)
  "Ensure that blank lines exist between headings and between headings and their contents.
With prefix, operate on whole buffer. Ensures that blank lines
exist after each headings's drawers."
  (interactive "P")
  (org-map-entries (lambda ()
                     (org-with-wide-buffer
                      ;; `org-map-entries' narrows the buffer, which prevents us from seeing
                      ;; newlines before the current heading, so we do this part widened.
                      (while (not (looking-back "\n\n" nil))
                        ;; Insert blank lines before heading.
                        (insert "\n")))
                     (let ((end (org-entry-end-position)))
                       ;; Insert blank lines before entry content
                       (forward-line)
                       (while (and (org-at-planning-p)
                                   (< (point) (point-max)))
                         ;; Skip planning lines
                         (forward-line))
                       (while (re-search-forward org-drawer-regexp end t)
                         ;; Skip drawers. You might think that `org-at-drawer-p' would suffice, but
                         ;; for some reason it doesn't work correctly when operating on hidden text.
                         ;; This works, taken from `org-agenda-get-some-entry-text'.
                         (re-search-forward "^[ \t]*:END:.*\n?" end t)
                         (goto-char (match-end 0)))
                       (unless (or (= (point) (point-max))
                                   (org-at-heading-p)
                                   (looking-at-p "\n"))
                         (insert "\n"))))
                   t (if prefix
                         nil
                       'tree)))

(defvar diego--lookup-provider-alist
  (append
   diego--shopify-lookup-provider-alist
   '(("Github Search" "https://github.com/search?q=%s")
     ("Github Shopify Repository" "https://github.com/Shopify/%s")
     ("Github Shopify Search" "https://github.com/search?q=org%%3AShopify+%s")
     ("Google" "https://google.com/search?q=%s"))))

(defun diego/open-url ()
  "Open an URL given a provider and a query."
  (interactive)
  (let ((site (cadr (assoc
                     (completing-read "Search on: " diego--lookup-provider-alist)
                     diego--lookup-provider-alist))))
    (browse-url
     (url-encode-url
      (format site (read-from-minibuffer "Query: "))))))
#+end_src

#+RESULTS:
: diego/org-fix-blank-lines

* Company Specific Functions

#+begin_src elisp
(load-file (substitute-in-file-name "$EMACS_ADDITIONAL_DIR/emacs.el"))
#+end_src

* Inspiration

Some parts of my configuration were copied and inspired from:

- [[https://github.com/syl20bnr/spacemacs/][Spacemacs]]
- [[https://github.com/hlissner/doom-emacs/][Doom Emacs]]
- [[https://gitlab.com/protesilaos/dotfiles/-/blob/master/emacs/.emacs.d/prot-emacs.org][Protesilaos Stavrou]]
- [[https://github.com/noctuid/evil-guide][Emacs/Evil for Vim Users]]
- [[https://github.com/raxod502/radian/blob/develop/emacs/radian.el][Radian]]
- [[https://github.com/daviwil/emacs-from-scratch/blob/master/init.el][Systems Crafters - Emacs From Scratch]]
- [[https://config.daviwil.com/emacs][Daviwil]]
- [[https://emacs.nasy.moe/][Nasy]]

* Pending tasks [7/12]
** DONE Replace ivy/counsel/swiper by selectrum/consult/marginalia/embark
** DONE Replace persp-mode by tab-bar
** DONE Replace doom-mode-line by normal mode-line
** TODO Replace projectile by project.el
:LOGBOOK:
- State "TODO"       from              [2021-05-28 Fri 16:47]
:END:
** DONE Replace selectrum by vertico
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-06-04 Fri 13:37]
:END:
** TODO Fix org toc
:LOGBOOK:
- State "TODO"       from              [2021-05-28 Fri 16:49]
:END:
** DONE Make elfeed entry buffer show below elfeed search
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-06-10 Thu 13:37]
- State "TODO"       from              [2021-05-28 Fri 16:50]
:END:
** TODO Enable multiple cursors
:LOGBOOK:
- State "TODO"       from              [2021-06-09 Wed 12:56]
:END:
evil-mc, multiple-cursors
https://github.com/syl20bnr/spacemacs/blob/develop/layers/%2Bmisc/multiple-cursors/packages.el
** DONE Use use-package :bind
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-06-10 Thu 15:16]
- State "TODO"       from              [2021-06-09 Wed 12:56]
:END:
** TODO move functions to it's own package usage
:LOGBOOK:
- State "TODO"       from              [2021-06-11 Fri 11:26]
:END:
** DONE fix file backup creation
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-06-22 Tue 09:15]
- State "TODO"       from              [2021-06-17 Thu 15:20]
:END:
** TODO fix evil jump C-o, C-i
:LOGBOOK:
- State "TODO"       from              [2021-06-22 Tue 09:19]
:END:
